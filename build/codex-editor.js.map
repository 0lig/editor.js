{"version":3,"sources":["webpack:///webpack/bootstrap e9b8a994bc6ec6db9157","webpack:///./src/components/__module.js","webpack:///./src/components/utils.js","webpack:///./src/components/dom.js","webpack:///./src/components/block.js","webpack:///./src/codex.js","webpack:///./src/components/polyfills.js","webpack:///./src/components/modules nonrecursive [^_](blockManager.js|caret.js|events.js|renderer.js|sanitizer.js|saver.js|toolbar.js|toolbox.js|tools.js|ui.js)$","webpack:///./src/components/modules/blockManager.js","webpack:///./src/components/modules/caret.js","webpack:///./src/components/modules/events.js","webpack:///./src/components/modules/renderer.js","webpack:///./src/components/modules/sanitizer.js","webpack:///./node_modules/html-janitor/src/html-janitor.js","webpack:///./src/components/modules/saver.js","webpack:///./src/components/modules/toolbar.js","webpack:///./src/components/modules/toolbox.js","webpack:///./src/components/modules/tools.js","webpack:///./src/components/modules/ui.js","webpack:///./src/styles/main.css","webpack:///./node_modules/css-loader/lib/css-base.js"],"names":["Module","config","new","target","TypeError","Editor","Util","msg","type","args","window","console","e","chains","success","fallback","Promise","resolve","reduce","previousValue","currentValue","iteration","then","waitNextBlock","length","chainData","successCallback","fallbackCallback","function","data","catch","collection","Array","prototype","slice","call","object","Object","keys","constructor","element","contentEditable","BACKSPACE","TAB","ENTER","SHIFT","CTRL","ALT","ESC","SPACE","LEFT","UP","DOWN","RIGHT","DELETE","META","TAG","TEXT","COMMENT","DOCUMENT_FRAGMENT","Dom","tagName","classNames","attributes","el","document","createElement","isArray","classList","add","attrName","content","createTextNode","parent","elements","forEach","appendChild","selector","querySelector","querySelectorAll","node","atLast","childNodes","isElement","isNativeInput","emptyTextNode","text","childsLength","last","getDeepestTextNode","nodeType","Node","ELEMENT_NODE","nativeInputs","indexOf","value","trim","textContent","replace","treeWalker","stack","push","nextSibling","shift","firstChild","every","checkNodeEmpty","Block","toolName","toolInstance","name","tool","_html","compose","wrapper","$","make","CSS","contentNode","pluginsContent","render","methodName","params","Function","extractedBlock","save","measuringStart","performance","now","measuringEnd","finishedExtraction","time","error","_","log","isValid","validate","contentless","emptyText","emptyMedia","hasMedia","mediaTags","join","state","isEmpty","selected","remove","modules","editorModules","map","module","exports","moduleInstances","configuration","init","start","constructModules","configureModules","displayName","getModulesDiff","diff","moduleName","prepareDecorator","prepare","Tools","UI","BlockManager","Renderer","items","initialBlock","holderId","placeholder","sanitizer","p","b","a","hideToolbar","tools","toolsConfig","Element","matches","msMatchesSelector","webkitMatchesSelector","closest","s","documentElement","contains","parentElement","parentNode","_blocks","currentBlockIndex","blocks","Blocks","nodes","redactor","Proxy","set","get","construct","block","bindEvents","addEventListener","event","wrapperClicked","keyDownOnBlock","setCurrentBlockByChildNode","keyCode","keyCodes","enterPressedOnPluginsContent","blockRightOrDownArrowPressed","getNextBlock","composeBlock","Caret","insert","index","childNode","parentFirstLevelBlock","currentNode","Error","array","currentBlock","BlockMethods","workingArea","html","deleteCount","splice","previousBlock","insertAdjacentElement","nextBlock","targetBlock","newBlock","children","instance","isNaN","Number","offset","focus","nodeToSet","range","createRange","selection","getSelection","setStart","setEnd","removeAllRanges","addRange","lastBlock","Events","subscribers","eventName","callback","previousData","currentHandler","newData","i","insertBlock","sequence","item","Sanitizer","defaultConfig","_sanitizerInstance","sanitizerConfig","settings","sanitizerInstance","require","taintString","customConfig","clean","library","tags","href","rel","newInstance","Saver","output","blocksData","all","allExtractedData","makeOutput","outputData","totalTime","groupCollapsed","extraction","groupEnd","Date","version","VERSION","Toolbar","actions","plusButton","settingsToggler","removeBlockButton","pluginSettings","defaultSettings","toolbar","append","plusButtonClicked","Toolbox","makeRemoveBlockButton","makeBlockSettingsPanel","close","defaultToolbarHeight","defaultOffset","newYCoordinate","offsetTop","style","transform","Math","floor","toolbarOpened","toggle","hide","plusButtonHidden","show","toolbox","buttons","opened","addTools","toolsAvailable","addTool","displayInToolbox","iconClassName","button","toolboxButton","title","dataset","buttonClicked","toolButton","toolClasses","irreplaceable","move","toolboxOpened","open","toolsUnavailable","enableLineBreaks","hasOwnProperty","reject","sequenceData","getListOfPrepareFunctions","toolPreparationList","toolClass","plugin","available","holder","loadStyles","getElementById","editorWrapper","editorZone","styles","tag","toString","head","redactorClicked","clickedNode","clickedOnRedactorZone","setToTheLastBlock","isInitialBlock","isInitial","isEmptyBlock","getLastBlock"],"mappings":"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A;AAAA;AAAA;AAAA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,CAAC;;AAED;AACA,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB;AACA;;AAEA;AACA;;AAEA;AACA,wBAAwB,iCAAiC,EAAE;AAC3D,6BAA6B,uEAAuE,EAAE;;AAEtG;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,QAAQ;;AAExB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB,4BAA4B;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;;AAEA,CAAC;;;;;;;;;;;;;;;;;;;;;;ACxLD;;;;;;;;AAQA;;;;;;;AAOA;;;;;;;;IAQqBe,K;;;AAEjB;;;;AAIA,yBAAsB;AAAA,YAAThR,MAAS,QAATA,MAAS;;AAAA;;AAAA,kHAEZ,EAACA,cAAD,EAFY;;AAIlB,cAAKiR,MAAL,GAAc,IAAd;AACA,cAAKC,UAAL,GAAkB,EAAlB;;AALkB;AAOrB;;AAED;;;;;;;;+BAIO;AAAA;;AAEH,gBAAIpF,SAAS,KAAK1L,MAAL,CAAYiK,YAAZ,CAAyByB,MAAtC;AAAA,gBACItK,YAAY,EADhB;;AAGAsK,mBAAOpH,OAAP,CAAe,UAAC4H,KAAD,EAAW;;AAEtB9K,0BAAU4E,IAAV,CAAekG,MAAM1K,IAArB;AAEH,aAJD;;AAMA,mBAAOb,QAAQoQ,GAAR,CAAY3P,SAAZ,EACFH,IADE,CACG,UAAC+P,gBAAD;AAAA,uBAAsB,OAAKC,UAAL,CAAgBD,gBAAhB,CAAtB;AAAA,aADH,EAEF/P,IAFE,CAEG,UAACiQ,UAAD,EAAgB;;AAElB,uBAAOA,UAAP;AAEH,aANE,CAAP;AAQH;;AAED;;;;;;;;mCAKWF,gB,EAAkB;;AAEzB,gBAAI7G,QAAQ,EAAZ;AAAA,gBACIgH,YAAY,CADhB;;AAGA7Q,oBAAQ8Q,cAAR,CAAuB,uBAAvB;;AAEAJ,6BAAiB1M,OAAjB,CAAyB,UAAC+M,UAAD,EAAapE,KAAb,EAAuB;;AAE5C;AACA3M,wBAAQ2H,GAAR,UAAgBoJ,WAAW3K,IAA3B,uBAAgD2K,UAAhD;AACAF,6BAAaE,WAAWvJ,IAAxB;AACAqC,sBAAMnE,IAAN,CAAWqL,WAAW7P,IAAtB;AAEH,aAPD;;AASAlB,oBAAQ2H,GAAR,CAAY,OAAZ,EAAqBkJ,SAArB;AACA7Q,oBAAQgR,QAAR;;AAEA,mBAAO;AACHxJ,sBAAU,CAAC,IAAIyJ,IAAJ,EADR;AAEHpH,uBAAUA,KAFP;AAGHqH,yBAAU,OAAAC;AAHP,aAAP;AAMH;;;;EAtE8B9R,M;;AA0EnkBAvOqBiR,K;;;;;;;;;;;;;;;;;;;;;;;ACvBrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmDqBc,O;;;AAEjB;;;AAGA,yBAAsB;AAAA,QAAT9R,MAAS,QAATA,MAAS;;AAAA;;AAAA,kHAEZ,EAACA,cAAD,EAFY;;AAIlB,UAAKgM,KAAL,GAAa;AACT/E,eAAU,IADD;AAET3C,eAAU,IAFD;AAGTyN,eAAU,IAHD;;AAKT;AACAC,kBAAa,IANJ;;AAQT;AACAC,uBAAkB,IATT;AAUTC,yBAAmB,IAVV;AAWT7B,gBAAU,IAXD;;AAaT;AACA8B,sBAAgB,IAdP;AAeTC,uBAAiB;AAfR,KAAb;;AAJkB;AAsBrB;;AAED;;;;;;;;;;;AA8BA;;;2BAGO;AAAA;;AAEH,WAAKpG,KAAL,CAAW/E,OAAX,GAAqBC,EAAEC,IAAF,CAAO,KAAP,EAAc2K,QAAQ1K,GAAR,CAAYiL,OAA1B,CAArB;;AAEA;;;AAGA,OAAC,SAAD,EAAa,SAAb,EAAwB3N,OAAxB,CAAiC,cAAM;;AAEnC,eAAKsH,KAAL,CAAWjI,EAAX,IAAiBmD,EAAEC,IAAF,CAAO,KAAP,EAAc2K,QAAQ1K,GAAR,CAAYrD,EAAZ,CAAd,CAAjB;AACAmD,UAAEoL,MAAF,CAAS,OAAKtG,KAAL,CAAW/E,OAApB,EAA6B,OAAK+E,KAAL,CAAWjI,EAAX,CAA7B;AAEH,OALD;;AAQA;;;;;AAKA,WAAKiI,KAAL,CAAWgG,UAAX,GAAwB9K,EAAEC,IAAF,CAAO,KAAP,EAAc2K,QAAQ1K,GAAR,CAAY4K,UAA1B,CAAxB;AACA9K,QAAEoL,MAAF,CAAS,KAAKtG,KAAL,CAAW1H,OAApB,EAA6B,KAAK0H,KAAL,CAAWgG,UAAxC;AACA,WAAKhG,KAAL,CAAWgG,UAAX,CAAsBxF,gBAAtB,CAAuC,OAAvC,EAAgD;AAAA,eAAS,OAAK+F,iBAAL,CAAuB9F,KAAvB,CAAT;AAAA,OAAhD,EAAwF,KAAxF;;AAGA;;;AAGA,WAAKrM,MAAL,CAAYoS,OAAZ,CAAoBrL,IAApB;;AAEA;;;;;;AAMA,WAAK6E,KAAL,CAAWiG,eAAX,GAA8B/K,EAAEC,IAAF,CAAO,MAAP,EAAe2K,QAAQ1K,GAAR,CAAY6K,eAA3B,CAA9B;AACA,WAAKjG,KAAL,CAAWkG,iBAAX,GAA+B,KAAKO,qBAAL,EAA/B;;AAEAvL,QAAEoL,MAAF,CAAS,KAAKtG,KAAL,CAAW+F,OAApB,EAA6B,CAAC,KAAK/F,KAAL,CAAWiG,eAAZ,EAA6B,KAAKjG,KAAL,CAAWkG,iBAAxC,CAA7B;;AAEA;;;AAGA,WAAKQ,sBAAL;;AAEA;;;AAGAxL,QAAEoL,MAAF,CAAS,KAAKlS,MAAL,CAAYgK,EAAZ,CAAe4B,KAAf,CAAqB/E,OAA9B,EAAuC,KAAK+E,KAAL,CAAW/E,OAAlD;AAEH;;AAED;;;;;;;;6CAKyB;;AAErB,WAAK+E,KAAL,CAAWqE,QAAX,GAAsBnJ,EAAEC,IAAF,CAAO,KAAP,EAAc2K,QAAQ1K,GAAR,CAAYiJ,QAA1B,CAAtB;;AAEA,WAAKrE,KAAL,CAAWmG,cAAX,GAA4BjL,EAAEC,IAAF,CAAO,KAAP,EAAc2K,QAAQ1K,GAAR,CAAY+K,cAA1B,CAA5B;AACA,WAAKnG,KAAL,CAAWoG,eAAX,GAA6BlL,EAAEC,IAAF,CAAO,KAAP,EAAc2K,QAAQ1K,GAAR,CAAYgL,eAA1B,CAA7B;;AAEAlL,QAAEoL,MAAF,CAAS,KAAKtG,KAAL,CAAWqE,QAApB,EAA8B,CAAC,KAAKrE,KAAL,CAAWmG,cAAZ,EAA4B,KAAKnG,KAAL,CAAWoG,eAAvC,CAA9B;AACAlL,QAAEoL,MAAF,CAAS,KAAKtG,KAAL,CAAW+F,OAApB,EAA6B,KAAK/F,KAAL,CAAWqE,QAAxC;AAEH;;AAED;;;;;;;4CAIwB;;AAEpB;;;;AAIA,aAAOnJ,EAAEC,IAAF,CAAO,MAAP,EAAe2K,QAAQ1K,GAAR,CAAY8K,iBAA3B,CAAP;AAEH;;AAED;;;;;;2BAGO;;AAEH;AACA,WAAK9R,MAAL,CAAYoS,OAAZ,CAAoBG,KAApB;;AAEA,UAAInF,cAAc,KAAKpN,MAAL,CAAYiK,YAAZ,CAAyBmD,WAA3C;;AAEA;;;AAGA,UAAI,CAACA,WAAL,EAAkB;;AAEd;AAEH;;AAED;;;;AAIA,UAAMoF,uBAAuB,EAA7B;AACA,UAAMC,gBAAgB,EAAtB;;AAEA,UAAIC,iBAAiBtF,YAAYuF,SAAZ,GAAyBH,uBAAuB,CAAhD,GAAqDC,aAA1E;;AAEA,WAAK7G,KAAL,CAAW/E,OAAX,CAAmB+L,KAAnB,CAAyBC,SAAzB,uBAAuDC,KAAKC,KAAL,CAAWL,cAAX,CAAvD;;AAEA;AACA;AAEH;;AAED;;;;;;2BAGO;;AAEH,WAAK9G,KAAL,CAAW/E,OAAX,CAAmB9C,SAAnB,CAA6BC,GAA7B,CAAiC0N,QAAQ1K,GAAR,CAAYgM,aAA7C;AAEH;;AAED;;;;;;4BAGQ;;AAEJ,WAAKpH,KAAL,CAAW/E,OAAX,CAAmB9C,SAAnB,CAA6B8E,MAA7B,CAAoC6I,QAAQ1K,GAAR,CAAYgM,aAAhD;AAEH;;AAED;;;;;;;;;AAaA;;;;sCAIkB3G,K,EAAO;;AAErB,WAAKrM,MAAL,CAAYoS,OAAZ,CAAoBa,MAApB;AAEH;;;wBAjBgB;AAAA;;AAEb,aAAO;AACHC,cAAM;AAAA,iBAAM,OAAKtH,KAAL,CAAWgG,UAAX,CAAsB7N,SAAtB,CAAgCC,GAAhC,CAAoC0N,QAAQ1K,GAAR,CAAYmM,gBAAhD,CAAN;AAAA,SADH;AAEHC,cAAM;AAAA,iBAAM,OAAKxH,KAAL,CAAWgG,UAAX,CAAsB7N,SAAtB,CAAgC8E,MAAhC,CAAuC6I,QAAQ1K,GAAR,CAAYmM,gBAAnD,CAAN;AAAA;AAFH,OAAP;AAKH;;;wBAhLgB;;AAEb,aAAO;AACHlB,iBAAS,YADN;AAEH/N,iBAAS,qBAFN;AAGHyN,iBAAS,qBAHN;;AAKHqB,uBAAe,oBALZ;;AAOH;AACApB,oBAAY,kBART;AASHuB,0BAAkB,0BATf;;AAWH;AACAtB,yBAAiB,0BAZd;AAaHC,2BAAmB,wBAbhB;;AAeH;AACA7B,kBAAU,aAhBP;AAiBH+B,yBAAiB,qBAjBd;AAkBHD,wBAAgB;AAlBb,OAAP;AAqBH;;;;EAzDgCpS,M;;;kBAAhB+R,O;;;;;;;;;;;;;;;;;;;;;;;ACnDrB;;;;;;;;;;IAUqBU,O;;;AAEjB;;;AAGA,2BAAsB;AAAA,YAATxS,MAAS,QAATA,MAAS;;AAAA;;AAAA,sHAEZ,EAACA,cAAD,EAFY;;AAIlB,cAAKgM,KAAL,GAAa;AACTyH,qBAAS,IADA;AAETC,qBAAS;AAFA,SAAb;;AAKA;;;;AAIA,cAAKC,MAAL,GAAc,KAAd;;AAbkB;AAerB;;AAED;;;;;;;;;;AAcA;;;+BAGO;;AAEH,iBAAK3H,KAAL,CAAWyH,OAAX,GAAqBvM,EAAEC,IAAF,CAAO,KAAP,EAAcqL,QAAQpL,GAAR,CAAYqM,OAA1B,CAArB;AACAvM,cAAEoL,MAAF,CAAS,KAAKlS,MAAL,CAAY0R,OAAZ,CAAoB9F,KAApB,CAA0B1H,OAAnC,EAA4C,KAAK0H,KAAL,CAAWyH,OAAvD;;AAEA,iBAAKG,QAAL;AAEH;;AAED;;;;;;mCAGW;;AAEP,gBAAI5I,QAAQ,KAAK5K,MAAL,CAAY+J,KAAZ,CAAkB0J,cAA9B;;AAEA,iBAAK,IAAIlN,QAAT,IAAqBqE,KAArB,EAA4B;;AAExB,qBAAK8I,OAAL,CAAanN,QAAb,EAAuBqE,MAAMrE,QAAN,CAAvB;AAEH;AAEJ;;AAED;;;;;;;;;gCAMQA,Q,EAAUG,I,EAAM;AAAA;;AAEpB,gBAAIA,KAAKiN,gBAAL,IAAyB,CAACjN,KAAKkN,aAAnC,EAAkD;;AAE9C5L,kBAAEC,GAAF,CAAM,oDAAN,EAA4D,MAA5D,EAAoE1B,QAApE;AACA;AAEH;;AAED;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,gBAAI,CAACG,KAAKiN,gBAAV,EAA4B;;AAExB;AAEH;;AAED,gBAAIE,SAAS/M,EAAEC,IAAF,CAAO,IAAP,EAAa,CAACqL,QAAQpL,GAAR,CAAY8M,aAAb,EAA4BpN,KAAKkN,aAAjC,CAAb,EAA8D;AACvEG,uBAAOxN;AADgE,aAA9D,CAAb;;AAIA;;;AAGAsN,mBAAOG,OAAP,CAAevN,IAAf,GAAsBF,QAAtB;;AAEAO,cAAEoL,MAAF,CAAS,KAAKtG,KAAL,CAAWyH,OAApB,EAA6BQ,MAA7B;;AAEA,iBAAKjI,KAAL,CAAWyH,OAAX,CAAmB9O,WAAnB,CAA+BsP,MAA/B;AACA,iBAAKjI,KAAL,CAAW0H,OAAX,CAAmBtN,IAAnB,CAAwB6N,MAAxB;;AAEA;;;AAGA;AACAA,mBAAOzH,gBAAP,CAAwB,OAAxB,EAAiC,iBAAS;;AAEtC,uBAAK6H,aAAL,CAAmB5H,KAAnB;AAEH,aAJD,EAIG,KAJH;AAMH;;AAED;;;;;;;;;;sCAOcA,K,EAAO;;AAEjB,gBAAI6H,aAAa7H,MAAMvM,MAAvB;AAAA,gBACIyG,WAAW2N,WAAWF,OAAX,CAAmBvN,IADlC;AAAA,gBAEIC,OAAO,KAAK1G,MAAL,CAAY+J,KAAZ,CAAkBoK,WAAlB,CAA8B5N,QAA9B,CAFX;;AAIA;;;AAGA,gBAAIgH,eAAe,KAAKvN,MAAL,CAAYiK,YAAZ,CAAyBsD,YAA5C;;AAEA;;;;;;AAMA,gBAAI,CAAC7G,KAAK0N,aAAN,IAAuB7G,aAAa5E,OAAxC,EAAiD;;AAE7C,qBAAK3I,MAAL,CAAYiK,YAAZ,CAAyBpE,OAAzB,CAAiCU,QAAjC;AAEH,aAJD,MAIO;;AAEH,qBAAKvG,MAAL,CAAYiK,YAAZ,CAAyB+C,MAAzB,CAAgCzG,QAAhC;AAEH;;AAED;;;;AAIA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA,iBAAKvG,MAAL,CAAY0R,OAAZ,CAAoB2C,IAApB;AAEH;;AAED;;;;;;+BAGO;;AAEH,iBAAKzI,KAAL,CAAWyH,OAAX,CAAmBtP,SAAnB,CAA6BC,GAA7B,CAAiCoO,QAAQpL,GAAR,CAAYsN,aAA7C;AACA,iBAAKf,MAAL,GAAc,IAAd;AAEH;;AAED;;;;;;gCAGQ;;AAEJ,iBAAK3H,KAAL,CAAWyH,OAAX,CAAmBtP,SAAnB,CAA6B8E,MAA7B,CAAoCuJ,QAAQpL,GAAR,CAAYsN,aAAhD;AACA,iBAAKf,MAAL,GAAc,KAAd;AAEH;;AAED;;;;;;iCAGS;;AAEL,gBAAI,CAAC,KAAKA,MAAV,EAAkB;;AAEd,qBAAKgB,IAAL;AAEH,aAJD,MAIO;;AAEH,qBAAKhC,KAAL;AAEH;AAEJ;;;4BAxLgB;;AAEb,mBAAQ;AACJc,yBAAS,YADL;AAEJS,+BAAe,oBAFX;AAGJQ,+BAAe;AAHX,aAAR;AAMH;;;;EAlCgC3U,M;;;kBAAhByS,O;;;;;;;;;;;;;;;;;;;;;;;ACVrB;;;;;;AAMA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;AAcA;;;;;;;;;IASqBrI,K;;;;;;;AAEjB;;;;4BAIgB;;AAEZ,mBAAO,KAAK0J,cAAZ;AAEH;;AAED;;;;;;;4BAIkB;;AAEd,mBAAO,KAAKe,gBAAZ;AAEH;;AAED;;;;;;;;;4BAM2B;;AAEvB,mBAAO;AACHZ,+BAAgB,EADb;AAEHD,kCAAmB,KAFhB;AAGHc,kCAAmB,KAHhB;AAIHL,+BAAgB;AAJb,aAAP;AAOH;;AAED;;;;;;;;AAKA,yBAAsB;AAAA,YAATxU,MAAS,QAATA,MAAS;;AAAA;;AAIlB;;;;;AAJkB,kHAEZ,EAACA,cAAD,EAFY;;AASlB,cAAKuU,WAAL,GAAmB,EAAnB;;AAEA;;;;;AAKA,cAAKV,cAAL,GAAsB,EAAtB;;AAEA;;;;;AAKA,cAAKe,gBAAL,GAAwB,EAAxB;;AAvBkB;AAyBrB;;AAED;;;;;;;;kCAIU;AAAA;;AAEN,gBAAI,CAAC,KAAK5U,MAAL,CAAY8U,cAAZ,CAA2B,OAA3B,CAAL,EAA0C;;AAEtC,uBAAO/T,QAAQgU,MAAR,CAAe,2BAAf,CAAP;AAEH;;AAED,iBAAI,IAAIpO,QAAR,IAAoB,KAAK3G,MAAL,CAAYgL,KAAhC,EAAuC;;AAEnC,qBAAKuJ,WAAL,CAAiB5N,QAAjB,IAA6B,KAAK3G,MAAL,CAAYgL,KAAZ,CAAkBrE,QAAlB,CAA7B;AAEH;;AAED;;;AAGA,gBAAIqO,eAAe,KAAKC,yBAAL,EAAnB;;AAEA;;;AAGA,gBAAID,aAAazT,MAAb,KAAwB,CAA5B,EAA+B;;AAE3B,uBAAOR,QAAQC,OAAR,EAAP;AAEH;;AAED;;;AAGA,mBAAOoH,EAAE2H,QAAF,CAAWiF,YAAX,EAAyB,UAACpT,IAAD,EAAU;;AAEtC,uBAAKf,OAAL,CAAae,IAAb;AAEH,aAJM,EAIJ,UAACA,IAAD,EAAU;;AAET,uBAAKd,QAAL,CAAcc,IAAd;AAEH,aARM,CAAP;AAUH;;AAED;;;;;;;oDAI4B;;AAExB,gBAAIsT,sBAAsB,EAA1B;;AAEA,iBAAI,IAAIvO,QAAR,IAAoB,KAAK4N,WAAzB,EAAsC;;AAElC,oBAAIY,YAAY,KAAKZ,WAAL,CAAiB5N,QAAjB,CAAhB;;AAEA,oBAAI,OAAOwO,UAAUjL,OAAjB,KAA6B,UAAjC,EAA6C;;AAEzCgL,wCAAoB9O,IAApB,CAAyB;AACrBzE,kCAAWwT,UAAUjL,OADA;AAErBtI,8BAAO;AACH+E;AADG;AAFc,qBAAzB;AAOH,iBATD,MASO;;AAEH;;;AAGA,yBAAKkN,cAAL,CAAoBlN,QAApB,IAAgCwO,SAAhC;AAEH;AAEJ;;AAED,mBAAOD,mBAAP;AAEH;;AAED;;;;;;gCAGQtT,I,EAAM;;AAEV,iBAAKiS,cAAL,CAAoBjS,KAAK+E,QAAzB,IAAqC,KAAK4N,WAAL,CAAiB3S,KAAK+E,QAAtB,CAArC;AAEH;;AAED;;;;;;iCAGS/E,I,EAAM;;AAEX,iBAAKgT,gBAAL,CAAsBhT,KAAK+E,QAA3B,IAAuC,KAAK4N,WAAL,CAAiB3S,KAAK+E,QAAtB,CAAvC;AAEH;;AAED;;;;;;;;;;;;kCASUG,I,EAAMlF,I,EAAM;;AAElB,gBAAIwT,SAAS,KAAKb,WAAL,CAAiBzN,IAAjB,CAAb;AAAA,gBACI9G,SAAS,KAAKA,MAAL,CAAYiL,WAAZ,CAAwBnE,IAAxB,CADb;;AAGA,gBAAI,CAAC9G,MAAL,EAAa;;AAETA,yBAAS,KAAKkQ,aAAd;AAEH;;AAED,gBAAI3B,WAAW,IAAI6G,MAAJ,CAAWxT,IAAX,EAAiB5B,MAAjB,CAAf;;AAEA,mBAAOuO,QAAP;AAEH;;AAED;;;;;;;;kCAKUzH,I,EAAM;;AAEZ,mBAAOA,gBAAgB,KAAKuO,SAAL,CAAe,KAAKrV,MAAL,CAAYwK,YAA3B,CAAvB;AAEH;;;;EA/M8BzK,M;;;kBAAdoK,K;;;;;;;;;;;;;;;;;ACTrB;;;;;;;;;;+eAjCA;;;;;AAKA;;AAEA;;;AAGA;;AAEA;;;AAGA;;AAEA;;;AAGA;;AAEA;;;AAGA;;AAEA;;;AAGA;AACA;;AAIA;;;;;;;;;;;;;;;;;;IAkBqBC,E;;;AAEjB;;;;;AAKA,oBAAsB;AAAA,QAATpK,MAAS,QAATA,MAAS;;AAAA;;AAAA,wGAEZ,EAACA,cAAD,EAFY;;AAIlB,UAAKgM,KAAL,GAAa;AACTsJ,cAAQ,IADC;AAETrO,eAAS,IAFA;AAGTgF,gBAAU;AAHD,KAAb;;AAJkB;AAUrB;;AAED;;;;;;;8BAGU;AAAA;;AAEN,aAAO,KAAK9E,IAAL;AACH;;;AADG,OAIF9F,IAJE,CAIG;AAAA,eAAM,OAAKjB,MAAL,CAAY0R,OAAZ,CAAoB3K,IAApB,EAAN;AAAA,OAJH;AAKH;;;AALG,OAQF9F,IARE,CAQG;AAAA,eAAM,OAAKkU,UAAL,EAAN;AAAA,OARH;AASH;;;AATG,OAYFlU,IAZE,CAYG;AAAA,eAAM,OAAKkL,UAAL,EAAN;AAAA,OAZH;;AAcP;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAxBO,OA0BF1K,KA1BE,CA0BI,aAAK;;AAERnB,gBAAQyH,KAAR,CAAcxH,CAAd;;AAEJ;AAEC,OAhCE,CAAP;AAkCH;;AAED;;;;;;;;;AAaA;;;;2BAIO;AAAA;;AAEH,aAAO,IAAII,OAAJ,CAAa,UAACC,OAAD,EAAU+T,MAAV,EAAqB;;AAErC;;;;AAIA,eAAK/I,KAAL,CAAWsJ,MAAX,GAAoBtR,SAASwR,cAAT,CAAwB,OAAKxV,MAAL,CAAYyK,QAApC,CAApB;;AAEA,YAAI,CAAC,OAAKuB,KAAL,CAAWsJ,MAAhB,EAAwB;;AAEpBP,iBAAOtH,MAAM,iCAAiC,OAAKzN,MAAL,CAAYyK,QAAnD,CAAP;AACA;AAEH;;AAED;;;AAGA,eAAKuB,KAAL,CAAW/E,OAAX,GAAsBC,EAAEC,IAAF,CAAO,KAAP,EAAc,OAAKC,GAAL,CAASqO,aAAvB,CAAtB;AACA,eAAKzJ,KAAL,CAAWC,QAAX,GAAsB/E,EAAEC,IAAF,CAAO,KAAP,EAAc,OAAKC,GAAL,CAASsO,UAAvB,CAAtB;;AAEA,eAAK1J,KAAL,CAAW/E,OAAX,CAAmBtC,WAAnB,CAA+B,OAAKqH,KAAL,CAAWC,QAA1C;AACA,eAAKD,KAAL,CAAWsJ,MAAX,CAAkB3Q,WAAlB,CAA8B,OAAKqH,KAAL,CAAW/E,OAAzC;;AAEAjG;AAEH,OA1BM,CAAP;AA4BH;;AAED;;;;;;iCAGa;;AAET;;;AAGA,UAAI2U,SAAS,mBAAApF,CAAQ,EAAR,CAAb;;AAEA;;;AAGA,UAAIqF,MAAM1O,EAAEC,IAAF,CAAO,OAAP,EAAgB,IAAhB,EAAsB;AAC5BnB,qBAAa2P,OAAOE,QAAP;AADe,OAAtB,CAAV;;AAIA;;;AAGA3O,QAAEoL,MAAF,CAAStO,SAAS8R,IAAlB,EAAwBF,GAAxB;AAEH;;AAED;;;;;;iCAGa;AAAA;;AAET;;;AAGA,WAAK5J,KAAL,CAAWC,QAAX,CAAoBO,gBAApB,CAAqC,OAArC,EAA8C;AAAA,eAAS,OAAKuJ,eAAL,CAAqBtJ,KAArB,CAAT;AAAA,OAA9C,EAAoF,KAApF;AAEH;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAwBgBA,K,EAAO;;AAEnB,UAAIuJ,cAAcvJ,MAAMvM,MAAxB;;AAEAQ,cAAQ2H,GAAR,CAAY,OAAZ,EAAqB2N,WAArB;AACA,UAAKA,YAAY7R,SAAZ,CAAsBsH,QAAtB,CAA+B,KAAKrE,GAAL,CAASsO,UAAxC,CAAL,EAA2D;;AAEvD,aAAKO,qBAAL,CAA2BxJ,KAA3B;AACA;AAEH;;AAED;;;AAGA,UAAI;;AAEA,aAAKrM,MAAL,CAAYiK,YAAZ,CAAyBuC,0BAAzB,CAAoDoJ,WAApD;;AAEJ;;;AAIC,OARD,CAQE,OAAOrV,CAAP,EAAU;;AAER,aAAKP,MAAL,CAAY+M,KAAZ,CAAkB+I,iBAAlB;AAEH;;AAKD;;;AAGA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,WAAK9V,MAAL,CAAY0R,OAAZ,CAAoB2C,IAApB;AACA,WAAKrU,MAAL,CAAY0R,OAAZ,CAAoB6C,IAApB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,WAAKvU,MAAL,CAAY0R,OAAZ,CAAoBE,UAApB,CAA+BsB,IAA/B;;AAEA;;;;;AAKA,UAAI6C,iBAAiB,KAAK/V,MAAL,CAAY+J,KAAZ,CAAkBiM,SAAlB,CAA4B,KAAKhW,MAAL,CAAYiK,YAAZ,CAAyBsD,YAAzB,CAAsC7G,IAAlE,CAArB;AAAA,UACIuP,eAAe,KAAKjW,MAAL,CAAYiK,YAAZ,CAAyBsD,YAAzB,CAAsC5E,OADzD;;AAGA,UAAIoN,kBAAkBE,YAAtB,EAAoC;;AAEhC,aAAKjW,MAAL,CAAY0R,OAAZ,CAAoBE,UAApB,CAA+BwB,IAA/B;AAEH;AAEJ;;;0CAEqB/G,K,EAAO;;AAEzB,UAAI4C,YAAY,KAAKjP,MAAL,CAAYiK,YAAZ,CAAyBiM,YAAzB,EAAhB;AAAA,UACIhP,iBAAiB+H,UAAU/H,cAD/B;;AAGA;;;AAGA,UAAI,CAACJ,EAAE6B,OAAF,CAAUzB,cAAV,CAAL,EAAgC;;AAE5B,aAAKlH,MAAL,CAAYiK,YAAZ,CAAyB+C,MAAzB,CAAgC,KAAKpN,MAAL,CAAYwK,YAA5C,EAA0D,EAA1D;AAEH,OAJD,MAIO;;AAEH,aAAKpK,MAAL,CAAY+M,KAAZ,CAAkBhB,GAAlB,CAAsB7E,cAAtB;AAEH;AAEJ;;;wBAvQS;;AAEN,aAAO;AACHmO,uBAAgB,cADb;AAEHC,oBAAgB;AAFb,OAAP;AAKH;;;;EAvE2B3V,M;;AA2UhkBAhiBqBqK,E;;;;;;;;ACrDrB;AACA;;;AAGA;AACA,gCAAiC,sLAAsL,4CAA4C,yBAAyB,6BAA6B,oBAAoB,6BAA6B,GAAG,uBAAuB,wBAAwB,OAAO,2BAA2B,gCAAgC,OAAO,eAAe,uBAAuB,YAAY,aAAa,WAAW,iBAAiB,2BAA2B,qCAAqC,oCAAoC,kBAAkB,GAAG,uBAAuB,qBAAqB,mBAAmB,8BAA8B,OAAO,wBAAwB,uBAAuB,qBAAqB,yBAAyB,KAAK,qBAAqB,yBAAyB,+BAA+B,4BAA4B,gCAAgC,kBAAkB,mBAAmB,wBAAwB,yBAAyB,6BAA6B,4BAA4B,mBAAmB,sBAAsB,qBAAqB,uBAAuB,yBAAyB,KAAK,6BAA6B,sBAAsB,KAAK,eAAe,yBAAyB,qCAAqC,2BAA2B,GAAG,uBAAuB,qBAAqB,8BAA8B,OAAO,uBAAuB,gCAAgC,2BAA2B,oBAAoB,8BAA8B,sBAAsB,uBAAuB,8BAA8B,2BAA2B,6BAA6B,kCAAkC,+BAA+B,2BAA2B,sBAAsB,uBAAuB,0BAA0B,wDAAwD,wDAAwD,wCAAwC,2BAA2B,uBAAuB,4BAA4B,KAAK,aAAa,4BAA4B,kBAAkB,GAAG,uBAAuB,gCAAgC,KAAK,sBAAsB,uBAAuB,qBAAqB,KAAK;;AAEp1E;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gBAAgB;AACnD,IAAI;AACJ;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA,YAAY,oBAAoB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,oDAAoD,cAAc;;AAElE;AACA","file":"codex-editor.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e9b8a994bc6ec6db9157","/**\n * @abstract\n * @class      Module\n * @classdesc  All modules inherits from this class.\n *\n * @typedef {Module} Module\n * @property {Object} config - Editor user settings\n * @property {Object} Editor - List of Editor modules\n */\nexport default class Module {\n\n    /**\n     * @constructor\n     *\n     * @param  {EditorConfig} config\n     */\n    constructor({ config } = {}) {\n\n        if (new.target === Module) {\n\n            throw new TypeError('Constructors for abstract class Module are not allowed.');\n\n        }\n\n        /**\n         * @type {EditorConfig}\n         */\n        this.config = config;\n\n        /**\n         * @type {EditorComponents}\n         */\n        this.Editor = null;\n\n    }\n\n    /**\n     * Editor modules setter\n     *\n     * @param Editor\n     * @param Editor.modules {@link CodexEditor#moduleInstances}\n     * @param Editor.config {@link CodexEditor#configuration}\n     */\n    set state(Editor) {\n\n        this.Editor = Editor;\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/__module.js","/**\n * Codex Editor Util\n */\nexport default class Util {\n\n    /**\n     * Custom logger\n     *\n     * @param {string} msg  - message\n     * @param {string} type - logging type 'log'|'warn'|'error'|'info'\n     * @param {*} args      - argument to log with a message\n     */\n    static log(msg, type, args) {\n\n        type = type || 'log';\n\n        if (!args) {\n\n            args  = msg || 'undefined';\n            msg  = '[codex-editor]:      %o';\n\n        } else {\n\n            msg  = '[codex-editor]:      ' + msg;\n\n        }\n\n        try{\n\n            if ( 'console' in window && window.console[ type ] ) {\n\n                if ( args ) window.console[ type ]( msg, args );\n                else window.console[ type ]( msg );\n\n            }\n\n        } catch(e) {\n            // do nothing\n        }\n\n    }\n\n    /**\n     * Returns basic keycodes as constants\n     * @return {{}}\n     */\n    static get keyCodes() {\n\n        return {\n            BACKSPACE: 8,\n            TAB: 9,\n            ENTER: 13,\n            SHIFT: 16,\n            CTRL: 17,\n            ALT: 18,\n            ESC: 27,\n            SPACE: 32,\n            LEFT: 37,\n            UP: 38,\n            DOWN: 40,\n            RIGHT: 39,\n            DELETE: 46,\n            META: 91\n        };\n\n    }\n\n    /**\n     * Returns basic nodetypes as contants\n     * @return {{TAG: number, TEXT: number, COMMENT: number, DOCUMENT_FRAGMENT: number}}\n     */\n    static get nodeTypes() {\n\n        return {\n            TAG     : 1,\n            TEXT    : 3,\n            COMMENT : 8,\n            DOCUMENT_FRAGMENT: 11\n        };\n\n    }\n\n    /**\n     * @typedef {Object} ChainData\n     * @property {Object} data - data that will be passed to the success or fallback\n     * @property {Function} function - function's that must be called asynchronically\n     */\n\n    /**\n     * Fires a promise sequence asyncronically\n     *\n     * @param {Object[]} chains - list or ChainData's\n     * @param {Function} success - success callback\n     * @param {Function} fallback - callback that fires in case of errors\n     *\n     * @return {Promise}\n     */\n    static sequence(chains, success = () => {}, fallback = () => {}) {\n\n        return new Promise(function (resolve) {\n\n            /**\n             * pluck each element from queue\n             * First, send resolved Promise as previous value\n             * Each plugins \"prepare\" method returns a Promise, that's why\n             * reduce current element will not be able to continue while can't get\n             * a resolved Promise\n             */\n            chains.reduce(function (previousValue, currentValue, iteration) {\n\n                return previousValue\n                    .then(() => waitNextBlock(currentValue, success, fallback))\n                    .then(() => {\n\n                        // finished\n                        if (iteration === chains.length - 1) {\n\n                            resolve();\n\n                        }\n\n                    });\n\n            }, Promise.resolve());\n\n        });\n\n        /**\n         * Decorator\n         *\n         * @param {ChainData} chainData\n         *\n         * @param {Function} successCallback\n         * @param {Function} fallbackCallback\n         *\n         * @return {Promise}\n         */\n        function waitNextBlock(chainData, successCallback, fallbackCallback) {\n\n            return new Promise(function (resolve) {\n\n                chainData.function()\n                    .then(() => {\n\n                        successCallback(chainData.data || {});\n\n                    })\n                    .then(resolve)\n                    .catch(function () {\n\n                        fallbackCallback(chainData.data || {});\n\n                        // anyway, go ahead even it falls\n                        resolve();\n\n                    });\n\n            });\n\n        }\n\n    }\n\n    /**\n     * Make array from array-like collection\n     *\n     * @param {*} collection\n     *\n     * @return {Array}\n     */\n    static array(collection) {\n\n        return Array.prototype.slice.call(collection);\n\n    }\n\n    /**\n     * Checks if object is empty\n     *\n     * @param {Object} object\n     * @return {boolean}\n     */\n    static isEmpty(object) {\n\n        return Object.keys(object).length === 0 && object.constructor === Object;\n\n    }\n\n    /**\n     * Check if passed object is a Promise\n     * @param  {*}  object - object to check\n     * @return {Boolean}\n     */\n    static isPromise(object) {\n\n        return Promise.resolve(object) === object;\n\n    }\n\n    /**\n     * Check if passed element is contenteditable\n     * @param element\n     * @return {boolean}\n     */\n    static isContentEditable(element) {\n\n        return element.contentEditable === 'true';\n\n    }\n\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/utils.js","/**\n * DOM manipulations helper\n */\nexport default class Dom {\n\n    /**\n     * Helper for making Elements with classname and attributes\n     *\n     * @param  {string} tagName           - new Element tag name\n     * @param  {array|string} classNames  - list or name of CSS classname(s)\n     * @param  {Object} attributes        - any attributes\n     * @return {Element}\n     */\n    static make(tagName, classNames = null, attributes = {}) {\n\n        var el = document.createElement(tagName);\n\n        if ( Array.isArray(classNames) ) {\n\n            el.classList.add(...classNames);\n\n        } else if( classNames ) {\n\n            el.classList.add(classNames);\n\n        }\n\n        for (let attrName in attributes) {\n\n            el[attrName] = attributes[attrName];\n\n        }\n\n        return el;\n\n    }\n\n    /**\n     * Creates text Node with content\n     *\n     * @param {String} content - text content\n     * @return {Text}\n     */\n    static text(content) {\n\n        return document.createTextNode(content);\n\n    }\n\n    /**\n     * Append one or several elements to the parent\n     *\n     * @param  {Element} parent    - where to append\n     * @param  {Element|Element[]} - element ore elements list\n     */\n    static append(parent, elements) {\n\n        if ( Array.isArray(elements) ) {\n\n            elements.forEach( el => parent.appendChild(el) );\n\n        } else {\n\n            parent.appendChild(elements);\n\n        }\n\n    }\n\n    /**\n     * Selector Decorator\n     *\n     * Returns first match\n     *\n     * @param {Element} el - element we searching inside. Default - DOM Document\n     * @param {String} selector - searching string\n     *\n     * @returns {Element}\n     */\n    static find(el = document, selector) {\n\n        return el.querySelector(selector);\n\n    }\n\n    /**\n     * Selector Decorator.\n     *\n     * Returns all matches\n     *\n     * @param {Element} el - element we searching inside. Default - DOM Document\n     * @param {String} selector - searching string\n     * @returns {NodeList}\n     */\n    static findAll(el = document, selector) {\n\n        return el.querySelectorAll(selector);\n\n    }\n\n    /**\n     * Search for deepest node\n     *\n     * @param {Element} node - start Node\n     * @param {Boolean} atLast - find last text node\n     * @return {*}\n     */\n    static getDeepestTextNode(node, atLast = false) {\n\n        if (node.childNodes.length === 0) {\n\n            /**\n             * We need to return empty text node\n             * But caret will not be placed in empty textNode, so we need textNode with zero-width char\n             */\n            if (this.isElement(node)) {\n\n                /** and it is not native input */\n                if (!this.isNativeInput(node)) {\n\n                    let emptyTextNode = this.text('\\u200B');\n\n                    node.appendChild(emptyTextNode);\n\n                }\n\n\n            }\n\n            return node;\n\n        }\n\n        let childsLength = node.childNodes.length,\n            last = childsLength - 1;\n\n        if (atLast) {\n\n            return this.getDeepestTextNode(node.childNodes[last], atLast);\n\n        } else {\n\n            return this.getDeepestTextNode(node.childNodes[0], false);\n\n        }\n\n    }\n\n    /**\n     * Check if object is DOM node\n     *\n     * @param {Object} node\n     * @returns {boolean}\n     */\n    static isElement(node) {\n\n        return node && typeof node === 'object' && node.nodeType && node.nodeType === Node.ELEMENT_NODE;\n\n    }\n\n    /**\n     * Checks target if it is native input\n     * @param {Element|*} target - HTML element or string\n     * @return {boolean}\n     */\n    static isNativeInput(target) {\n\n        let nativeInputs = [\n            'INPUT',\n            'TEXTAREA'\n        ];\n\n        return nativeInputs.indexOf(target.tagName) !== -1;\n\n    }\n\n    /**\n     * Checks node if it is empty\n     * It must be node without childNodes\n     * @param {Node} node\n     *\n     * @return {Boolean} true if it is empty\n     */\n    static checkNodeEmpty(node) {\n\n        if ( this.isElement(node) && this.isNativeInput(node) ) {\n\n            node = node.value;\n\n            if ( node.trim() ) {\n\n                return false;\n\n            }\n\n\n        } else {\n\n            node = node.textContent.replace('\\u200B', '');\n\n            if ( node.trim() ) {\n\n                return false;\n\n            }\n\n        }\n\n        return true;\n\n    }\n\n    /**\n     * breadth-first search\n     *\n     * Pushes to stack all DOM leafs and checks for emptiness\n     * @param {Node} node\n     * @return {boolean}\n     */\n    static isEmpty(node) {\n\n        let treeWalker = [],\n            stack = [];\n\n        treeWalker.push(node);\n\n        while ( treeWalker.length > 0 ) {\n\n            if (node && node.childNodes.length === 0) {\n\n                stack.push(node);\n\n            }\n\n            while ( node && node.nextSibling ) {\n\n                node = node.nextSibling;\n\n                if (!node) continue;\n\n                if (node.childNodes.length === 0) {\n\n                    stack.push(node);\n\n                }\n\n                treeWalker.push(node);\n\n            }\n\n            node = treeWalker.shift();\n\n            if (!node) continue;\n\n            node = node.firstChild;\n            treeWalker.push(node);\n\n        }\n\n        return stack.every( this.checkNodeEmpty );\n\n    }\n\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/dom.js","/**\n *\n * @class Block\n * @classdesc This class describes editor`s block, including block`s HTMLElement, data and tool\n *\n * @property {Tool} tool — current block tool (Paragraph, for example)\n * @property {Object} CSS — block`s css classes\n *\n */\n\n/**\n * @classdesc Abstract Block class that contains Block information, Tool name and Tool class instance\n *\n * @property tool - Tool instance\n * @property html - Returns HTML content of plugin\n * @property wrapper - Div element that wraps block content with Tool's content. Has `ce-block` CSS class\n * @property contentNode - Div element that wraps Tool's content. Has `ce-block__content` CSS class\n * @property pluginsContent - HTML content that returns by Tool's render function\n */\nexport default class Block {\n\n    /**\n     * @constructor\n     * @param {String} toolName - Tool name that passed on initialization\n     * @param {Object} toolInstance — passed Tool`s instance that rendered the Block\n     */\n    constructor(toolName, toolInstance) {\n\n        this.name = toolName;\n        this.tool = toolInstance;\n        this._html = this.compose();\n\n    }\n\n    /**\n     * CSS classes for the Block\n     * @return {{wrapper: string, content: string}}\n     */\n    static get CSS() {\n\n        return {\n            wrapper: 'ce-block',\n            content: 'ce-block__content',\n            selected: 'ce-block--selected'\n        };\n\n    }\n\n    /**\n     * Make default Block wrappers and put Tool`s content there\n     * @returns {HTMLDivElement}\n     */\n    compose() {\n\n        this.wrapper = $.make('div', Block.CSS.wrapper);\n        this.contentNode    = $.make('div', Block.CSS.content);\n        this.pluginsContent  = this.tool.render();\n\n        this.contentNode.appendChild(this.pluginsContent);\n        this.wrapper.appendChild(this.contentNode);\n\n        return this.wrapper;\n\n    }\n\n    /**\n     * Calls Tool's method\n     *\n     * Method checks tool property {MethodName}. Fires method with passes params If it is instance of Function\n     *\n     * @param {String} methodName\n     * @param {Object} params\n     */\n    call(methodName, params) {\n\n        /**\n         * call Tool's method with the instance context\n         */\n        if (this.tool[methodName] && this.tool[methodName] instanceof Function) {\n\n            this.tool[methodName].call(this.tool, params);\n\n        }\n\n    }\n\n    /**\n     * Get Block`s HTML\n     * @returns {HTMLElement}\n     */\n    get html() {\n\n        return this._html;\n\n    }\n\n    /**\n     * Get Block's JSON data\n     * @return {Object}\n     */\n    get data() {\n\n        return this.save();\n\n    }\n\n    /**\n     * Extracts data from Block\n     * Groups Tool's save processing time\n     * @return {Object}\n     */\n    save() {\n\n        let extractedBlock = this.tool.save(this.pluginsContent);\n\n        /** Measuring execution time*/\n        let measuringStart = window.performance.now(),\n            measuringEnd;\n\n        return Promise.resolve(extractedBlock)\n            .then((finishedExtraction) => {\n\n                /** measure promise execution */\n                measuringEnd = window.performance.now();\n\n                return {\n                    tool: this.name,\n                    data: finishedExtraction,\n                    time : measuringEnd - measuringStart\n                };\n\n            })\n            .catch(function (error) {\n\n                _.log(`Saving proccess for ${this.tool.name} tool failed due to the ${error}`, 'log', 'red');\n\n            });\n\n    }\n\n    /**\n     * Uses Tool's validation method to check the correctness of output data\n     * Tool's validation method is optional\n     *\n     * @description Method also can return data if it passed the validation\n     *\n     * @param {Object} data\n     * @returns {Boolean|Object} valid\n     */\n    validateData(data) {\n\n        let isValid = true;\n\n        if (this.tool.validate instanceof Function) {\n\n            isValid = this.tool.validate(data);\n\n        }\n\n        if (!isValid) {\n\n            return false;\n\n        }\n\n        return data;\n\n    }\n\n    /**\n     * Check block for emptiness\n     * @return {Boolean}\n     */\n    get isEmpty() {\n\n        /**\n         * Allow Tool to represent decorative contentless blocks: for example \"* * *\"-tool\n         * That Tools are not empty\n         */\n        if (this.tool.contentless) {\n\n            return false;\n\n        }\n\n        let emptyText = this._html.textContent.trim().length === 0,\n            emptyMedia = !this.hasMedia;\n\n        return emptyText && emptyMedia;\n\n    }\n\n    /**\n     * Check if block has a media content such as images, iframes and other\n     * @return {Boolean}\n     */\n    get hasMedia() {\n\n        /**\n         * This tags represents media-content\n         * @type {string[]}\n         */\n        const mediaTags = [\n            'img',\n            'iframe',\n            'video',\n            'audio',\n            'source',\n            'input',\n            'textarea',\n            'twitterwidget'\n        ];\n\n        return !!this._html.querySelector(mediaTags.join(','));\n\n    }\n\n    /**\n     * Set selected state\n     * @param {Boolean} state - 'true' to select, 'false' to remove selection\n     */\n    set selected(state) {\n\n        /**\n         * We don't need to mark Block as Selected when it is not empty\n         */\n        if (state === true && !this.isEmpty) {\n\n            this._html.classList.add(Block.CSS.selected);\n\n        } else {\n\n            this._html.classList.remove(Block.CSS.selected);\n\n        }\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/block.js","/**\n * Codex Editor\n *\n * Short Description (눈_눈;)\n * @version 2.0.0\n *\n * How to start?\n * Example:\n *           new CodexEditor({\n *                holderId : 'codex-editor',\n *                initialBlock : 'text',\n *                placeholder : 'Write your story....',\n *                tools: {\n *                    quote: Quote,\n *                    anotherTool : AnotherTool\n *                },\n *                toolsConfig: {\n *                     quote: {\n *                        iconClassname : 'quote-icon',\n *                        displayInToolbox : true,\n *                        enableLineBreaks : true\n *                     },\n *                     anotherTool: {\n *                        iconClassname : 'tool-icon'\n *                     }\n *                 }\n *            });\n *\n * - tools is an object: {\n *       pluginName: PluginClass,\n *       .....\n *   }\n * - toolsConfig is an additional configuration that uses Codex Editor API\n *      iconClassname - CSS classname of toolbox icon\n *      displayInToolbox - if you want to see your Tool in toolbox hided in \"plus\" button, than set \"True\". By default : \"False\"\n *      enableLineBreaks - by default enter creates new block that set as initialblock, but if you set this property \"True\", enter will break the lines in current block\n *\n * @author CodeX-Team <https://ifmo.su>\n *\n */\n\n/**\n * @typedef {CodexEditor} CodexEditor - editor class\n */\n\n/**\n * @typedef {Object} EditorConfig\n * @property {String} holderId           - Element to append Editor\n * @property {Array} data                - Blocks list in JSON-format\n * @property {Object} tools              - Map for used Tools in format { name : Class, ... }\n * @property {String} initialBlock       - This Tool will be added by default\n * @property {String} placeholder        - First Block placeholder\n * @property {Object} sanitizer          - @todo fill desc\n * @property {Boolean} hideToolbar       - @todo fill desc\n * @property {Object} toolsConfig        - tools configuration {@link Tools#ToolsConfig}\n */\n\n/**\n * Dynamically imported utils\n *\n * @typedef {Dom}   $      - {@link components/dom.js}\n * @typedef {Util}  _      - {@link components/utils.js}\n */\n\n'use strict';\n\n/**\n * Apply polyfills\n */\nimport 'components/polyfills';\n\n/**\n * Require Editor modules places in components/modules dir\n */\n// eslint-disable-next-line\nlet modules = editorModules.map( module => require('./components/modules/' + module ));\n\n/**\n * @class\n *\n * @classdesc CodeX Editor base class\n *\n * @property this.config - all settings\n * @property this.moduleInstances - constructed editor components\n *\n * @type {CodexEditor}\n */\nmodule.exports = class CodexEditor {\n\n    /** Editor version */\n    static get version() {\n\n        return VERSION;\n\n    }\n\n    /**\n     * @param {EditorConfig} config - user configuration\n     *\n     */\n    constructor(config) {\n\n        /**\n         * Configuration object\n         * @type {EditorConfig}\n         */\n        this.config = {};\n\n        /**\n         * @typedef {Object} EditorComponents\n         * @property {BlockManager} BlockManager\n         * @property {Tools} Tools\n         * @property {Events} Events\n         * @property {UI} UI\n         * @property {Toolbar} Toolbar\n         * @property {Toolbox} Toolbox\n         * @property {Renderer} Renderer\n         */\n        this.moduleInstances = {};\n\n        Promise.resolve()\n            .then(() => {\n\n                this.configuration = config;\n\n            })\n            .then(() => this.init())\n            .then(() => this.start())\n            .then(() => {\n\n                console.log('CodeX Editor is ready!');\n\n            })\n            .catch(error => {\n\n                console.log('CodeX Editor does not ready because of %o', error);\n\n            });\n\n    }\n\n    /**\n     * Setting for configuration\n     * @param {EditorConfig} config\n     */\n    set configuration(config) {\n\n        /**\n         * Initlai block type\n         * Uses in case when there is no items passed\n         * @type {{type: (*), data: {text: null}}}\n         */\n        let initialBlock = {\n            type : config.initialBlock,\n            data : {}\n        };\n\n        this.config.holderId = config.holderId;\n        this.config.placeholder = config.placeholder || 'write your story...';\n        this.config.sanitizer = config.sanitizer || {\n            p: true,\n            b: true,\n            a: true\n        };\n\n        this.config.hideToolbar = config.hideToolbar ? config.hideToolbar : false;\n        this.config.tools = config.tools || {};\n        this.config.toolsConfig = config.toolsConfig || {};\n        this.config.data = config.data || {};\n\n        /**\n         * Initialize items to pass data to the Renderer\n         */\n        if (_.isEmpty(this.config.data)) {\n\n            this.config.data = {};\n            this.config.data.items = [ initialBlock ];\n\n        } else {\n\n            if (!this.config.data.items || this.config.data.items.length === 0) {\n\n                this.config.data.items = [ initialBlock ];\n\n            }\n\n        }\n\n        /**\n         * If initial Block's Tool was not passed, use the first Tool in config.tools\n         */\n        if (!config.initialBlock) {\n\n            for (this.config.initialBlock in this.config.tools) break;\n\n        } else {\n\n            this.config.initialBlock = config.initialBlock;\n\n        }\n\n    }\n\n    /**\n     * Returns private property\n     * @returns {EditorConfig}\n     */\n    get configuration() {\n\n        return this.config;\n\n    }\n\n    /**\n     * Initializes modules:\n     *  - make and save instances\n     *  - configure\n     */\n    init() {\n\n        /**\n         * Make modules instances and save it to the @property this.moduleInstances\n         */\n        this.constructModules();\n\n        /**\n         * Modules configuration\n         */\n        this.configureModules();\n\n    }\n\n    /**\n     * Make modules instances and save it to the @property this.moduleInstances\n     */\n    constructModules() {\n\n        modules.forEach( Module => {\n\n            try {\n\n                /**\n                 * We use class name provided by displayName property\n                 *\n                 * On build, Babel will transform all Classes to the Functions so, name will always be 'Function'\n                 * To prevent this, we use 'babel-plugin-class-display-name' plugin\n                 * @see  https://www.npmjs.com/package/babel-plugin-class-display-name\n                 */\n                this.moduleInstances[Module.displayName] = new Module({\n                    config : this.configuration\n                });\n\n            } catch ( e ) {\n\n                console.log('Module %o skipped because %o', Module, e);\n\n            }\n\n        });\n\n    }\n\n    /**\n     * Modules instances configuration:\n     *  - pass other modules to the 'state' property\n     *  - ...\n     */\n    configureModules() {\n\n        for(let name in this.moduleInstances) {\n\n            /**\n             * Module does not need self-instance\n             */\n            this.moduleInstances[name].state = this.getModulesDiff( name );\n\n        }\n\n    }\n\n    /**\n     * Return modules without passed name\n     */\n    getModulesDiff( name ) {\n\n        let diff = {};\n\n        for(let moduleName in this.moduleInstances) {\n\n            /**\n             * Skip module with passed name\n             */\n            if (moduleName === name) {\n\n                continue;\n\n            }\n            diff[moduleName] = this.moduleInstances[moduleName];\n\n        }\n\n        return diff;\n\n    }\n\n    /**\n     * Start Editor!\n     *\n     * Get list of modules that needs to be prepared and return a sequence (Promise)\n     * @return {Promise}\n     */\n    start() {\n\n        let prepareDecorator = module => module.prepare();\n\n        return Promise.resolve()\n            .then(prepareDecorator(this.moduleInstances.Tools))\n            .then(prepareDecorator(this.moduleInstances.UI))\n            .then(prepareDecorator(this.moduleInstances.BlockManager))\n            .then(() => {\n\n                return this.moduleInstances.Renderer.render(this.config.data.items);\n\n\n            });\n\n    }\n\n};\n\n// module.exports = (function (editor) {\n//\n//     'use strict';\n//\n//     editor.version = VERSION;\n//     editor.scriptPrefix = 'cdx-script-';\n//\n//     var init = function () {\n//\n//         editor.core          = require('./modules/core');\n//         editor.tools         = require('./modules/tools');\n//         editor.ui            = require('./modules/ui');\n//         editor.transport     = require('./modules/transport');\n//         editor.renderer      = require('./modules/renderer');\n//         editor.saver         = require('./modules/saver');\n//         editor.content       = require('./modules/content');\n//         editor.toolbar       = require('./modules/toolbar/toolbar');\n//         editor.callback      = require('./modules/callbacks');\n//         editor.draw          = require('./modules/draw');\n//         editor.caret         = require('./modules/caret');\n//         editor.notifications = require('./modules/notifications');\n//         editor.parser        = require('./modules/parser');\n//         editor.sanitizer     = require('./modules/sanitizer');\n//         editor.listeners     = require('./modules/listeners');\n//         editor.destroyer     = require('./modules/destroyer');\n//         editor.paste         = require('./modules/paste');\n//\n//     };\n//\n//     /**\n//      * @public\n//      * holds initial settings\n//      */\n//     editor.settings = {\n//         tools     : ['text', 'header', 'picture', 'list', 'quote', 'code', 'twitter', 'instagram', 'smile'],\n//         holderId  : 'codex-editor',\n//\n//         // Type of block showing on empty editor\n//         initialBlockPlugin: 'text'\n//     };\n//\n//     /**\n//      * public\n//      *\n//      * Static nodes\n//      */\n//     editor.nodes = {\n//         holder            : null,\n//         wrapper           : null,\n//         toolbar           : null,\n//         inlineToolbar     : {\n//             wrapper : null,\n//             buttons : null,\n//             actions : null\n//         },\n//         toolbox           : null,\n//         notifications     : null,\n//         plusButton        : null,\n//         showSettingsButton: null,\n//         showTrashButton   : null,\n//         blockSettings     : null,\n//         pluginSettings    : null,\n//         defaultSettings   : null,\n//         toolbarButtons    : {}, // { type : DomEl, ... }\n//         redactor          : null\n//     };\n//\n//     /**\n//      * @public\n//      *\n//      * Output state\n//      */\n//     editor.state = {\n//         jsonOutput  : [],\n//         blocks      : [],\n//         inputs      : []\n//     };\n//\n//     /**\n//     * @public\n//     * Editor plugins\n//     */\n//     editor.tools = {};\n//\n//     editor.start = function (userSettings) {\n//\n//         init();\n//\n//         editor.core.prepare(userSettings)\n//\n//         // If all ok, make UI, bind events and parse initial-content\n//             .then(editor.ui.prepare)\n//             .then(editor.tools.prepare)\n//             .then(editor.sanitizer.prepare)\n//             .then(editor.paste.prepare)\n//             .then(editor.transport.prepare)\n//             .then(editor.renderer.makeBlocksFromData)\n//             .then(editor.ui.saveInputs)\n//             .catch(function (error) {\n//\n//                 editor.core.log('Initialization failed with error: %o', 'warn', error);\n//\n//             });\n//\n//     };\n//\n//     return editor;\n//\n// })({});\n\n\n\n// WEBPACK FOOTER //\n// ./src/codex.js","/**\n * Element.closest()\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\n */\nif (!Element.prototype.matches)\n    Element.prototype.matches = Element.prototype.msMatchesSelector ||\n        Element.prototype.webkitMatchesSelector;\n\nif (!Element.prototype.closest)\n    Element.prototype.closest = function (s) {\n\n        var el = this;\n\n        if (!document.documentElement.contains(el)) return null;\n        do {\n\n            if (el.matches(s)) return el;\n            el = el.parentElement || el.parentNode;\n\n        } while (el !== null);\n        return null;\n\n    };\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/polyfills.js","var map = {\n\t\"./blockManager.js\": 7,\n\t\"./caret.js\": 8,\n\t\"./events.js\": 9,\n\t\"./renderer.js\": 10,\n\t\"./sanitizer.js\": 11,\n\t\"./saver.js\": 13,\n\t\"./toolbar.js\": 14,\n\t\"./toolbox.js\": 15,\n\t\"./tools.js\": 16,\n\t\"./ui.js\": 17\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 6;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/modules nonrecursive [^_](blockManager.js|caret.js|events.js|renderer.js|sanitizer.js|saver.js|toolbar.js|toolbox.js|tools.js|ui.js)$\n// module id = 6\n// module chunks = 0","/**\n * @class BlockManager\n * @classdesc Manage editor`s blocks storage and appearance\n *\n * @module BlockManager\n */\n\nimport Block from '../block';\n\n/**\n * @typedef {BlockManager} BlockManager\n * @property {Number} currentBlockIndex - Index of current working block\n * @property {Proxy} _blocks - Proxy for Blocks instance {@link Blocks}\n */\nexport default class BlockManager extends Module {\n\n    /**\n     * @constructor\n     * @param {EditorConfig} config\n     */\n    constructor({config}) {\n\n        super({config});\n\n        /**\n         * Proxy for Blocks instance {@link Blocks}\n         *\n         * @type {Proxy}\n         * @private\n         */\n        this._blocks = null;\n\n        /**\n         * Index of current working block\n         *\n         * @type {number}\n         * @private\n         */\n        this.currentBlockIndex = -1;\n\n    }\n\n    /**\n     * Should be called after Editor.UI preparation\n     * Define this._blocks property\n     *\n     * @returns {Promise}\n     */\n    prepare() {\n\n        return new Promise(resolve => {\n\n            let blocks = new Blocks(this.Editor.UI.nodes.redactor);\n\n            /**\n             * We need to use Proxy to overload set/get [] operator.\n             * So we can use array-like syntax to access blocks\n             *\n             * @example\n             * this._blocks[0] = new Block(...);\n             *\n             * block = this._blocks[0];\n             *\n             * @todo proxy the enumerate method\n             *\n             * @type {Proxy}\n             * @private\n             */\n            this._blocks = new Proxy(blocks, {\n                set: Blocks.set,\n                get: Blocks.get\n            });\n\n            resolve();\n\n        });\n\n    }\n\n    /**\n     * Creates Block instance by tool name\n     *\n     * @param {String} toolName - tools passed in editor config {@link EditorConfig#tools}\n     * @param {Object} data - constructor params\n     *\n     * @return {Block}\n     */\n    composeBlock(toolName, data) {\n\n        let toolInstance = this.Editor.Tools.construct(toolName, data),\n            block = new Block(toolName, toolInstance);\n\n        this.bindEvents(block);\n\n        /**\n         * Apply callback before inserting html\n         */\n        block.call('appendCallback', {});\n\n        return block;\n\n    }\n\n    /**\n     * Bind Events\n     * @param {Object} block\n     */\n    bindEvents(block) {\n\n        /** contentNode click handler */\n        block.wrapper.addEventListener('click', (event) => this.wrapperClicked(event), false);\n\n        /** keydown on block */\n        block.pluginsContent.addEventListener('keydown', (event) => this.keyDownOnBlock(event), false);\n\n    }\n\n    /**\n     * Highlight clicked block\n     * @param {MouseEvent} event\n     */\n    wrapperClicked(event) {\n\n        this.setCurrentBlockByChildNode(event.target);\n\n    }\n\n    /**\n     *\n     * @param {MouseEvent} event\n     */\n    keyDownOnBlock(event) {\n\n        switch(event.keyCode) {\n\n            case _.keyCodes.ENTER:\n                this.enterPressedOnPluginsContent(event);\n                break;\n            case _.keyCodes.DOWN:\n            case _.keyCodes.RIGHT:\n                this.blockRightOrDownArrowPressed(event);\n                break;\n\n        }\n\n    }\n\n    /**\n     *\n     * @param event\n     */\n    blockRightOrDownArrowPressed(event) {\n\n        console.log(this.getNextBlock());\n\n    }\n\n    /**\n     * Insert new block into _blocks\n     *\n     * @param {String} toolName — plugin name\n     * @param {Object} data — plugin data\n     */\n    insert(toolName, data = {}) {\n\n\n        let block = this.composeBlock(toolName, data);\n\n        this._blocks[++this.currentBlockIndex] = block;\n\n        this.Editor.Caret.set(block.pluginsContent);\n\n    }\n\n    /**\n     * Replace current working block\n     *\n     * @param {String} toolName — plugin name\n     * @param {Object} data — plugin data\n     */\n    replace(toolName, data = {}) {\n\n        let block = this.composeBlock(toolName, data);\n\n        this._blocks.insert(this.currentBlockIndex, block, true);\n\n    }\n\n    /**\n     *\n     * @return {*}\n     */\n    getLastBlock() {\n\n        return this._blocks[this._blocks.length - 1];\n\n    }\n\n    /**\n     *\n     * @param index\n     * @return {*}\n     */\n    getBlockByIndex(index) {\n\n        return this._blocks[index];\n\n    }\n\n    getNextBlock() {\n\n        if (this.currentBlockIndex + 1 > this._blocks.length - 1) {\n\n            return null;\n\n        }\n\n        return this._blocks[this.currentBlockIndex + 1];\n\n    }\n\n    /**\n     * Get Block instance by html element\n     *\n     * @todo get first level block before searching\n     *\n     * @param {HTMLElement} element\n     * @returns {Block}\n     */\n    getBlock(element) {\n\n        let nodes = this._blocks.nodes,\n            index = nodes.indexOf(element);\n\n        if (index >= 0) {\n\n            return this._blocks[index];\n\n        }\n\n    }\n\n    /**\n     * Get current Block instance\n     *\n     * @return {Block}\n     */\n    get currentBlock() {\n\n        return this._blocks[this.currentBlockIndex];\n\n    }\n\n    /**\n     * Get working html element\n     *\n     * @return {HTMLElement}\n     */\n    get currentNode() {\n\n        return this._blocks.nodes[this.currentBlockIndex];\n\n    }\n\n    /**\n     * Set currentBlockIndex to passed block\n     *\n     * @todo get first level block before searching\n     *\n     * @param {HTMLElement} element\n     */\n    set currentNode(element) {\n\n        let nodes = this._blocks.nodes;\n\n        /**\n         * Update current Block's index\n         * @type {number}\n         */\n        this.currentBlockIndex = nodes.indexOf(element);\n\n        /**\n         * Remove previous selected Block's state\n         */\n        this._blocks.array.forEach( block => block.selected = false);\n\n        /**\n         * Mark current Block as selected\n         * @type {boolean}\n         */\n        this.currentBlock.selected = true;\n\n    }\n\n    /**\n     * Get array of Block instances\n     *\n     * @returns {Block[]} {@link Blocks#array}\n     */\n    get blocks() {\n\n        return this._blocks.array;\n\n    }\n\n    /**\n     * 1) Find first-level Block from passed child Node\n     * 2) Mark it as current\n     *\n     *  @param {Element|Text} childNode - look ahead from this node.\n     *  @throws Error  - when passed Node is not included at the Block\n     */\n    setCurrentBlockByChildNode(childNode) {\n\n        /**\n         * If node is Text TextNode\n         */\n        if (!$.isElement(childNode)) {\n\n            childNode = childNode.parentNode;\n\n        }\n\n        let parentFirstLevelBlock = childNode.closest(`.${Block.CSS.wrapper}`);\n\n        if (parentFirstLevelBlock) {\n\n            this.currentNode = parentFirstLevelBlock;\n\n        } else {\n\n            throw new Error('Can not find a Block from this child Node');\n\n        }\n\n    }\n\n}\n\nclass BlockMethods {\n\n\n\n}\n\n/**\n * @class Blocks\n * @classdesc Class to work with Block instances array\n *\n * @private\n *\n * @property {HTMLElement} workingArea — editor`s working node\n *\n */\nclass Blocks {\n\n    /**\n     * @constructor\n     *\n     * @param {HTMLElement} workingArea — editor`s working node\n     */\n    constructor(workingArea) {\n\n        this.blocks = [];\n        this.workingArea = workingArea;\n\n    }\n\n    /**\n     * Push back new Block\n     *\n     * @param {Block} block\n     */\n    push(block) {\n\n        this.blocks.push(block);\n        this.workingArea.appendChild(block.html);\n\n    }\n\n    /**\n     * Insert new Block at passed index\n     *\n     * @param {Number} index — index to insert Block\n     * @param {Block} block — Block to insert\n     * @param {Boolean} replace — it true, replace block on given index\n     */\n    insert(index, block, replace = false) {\n\n        if (!this.length) {\n\n            this.push(block);\n            return;\n\n        }\n\n        if (index > this.length) {\n\n            index = this.length;\n\n        }\n\n        if (replace) {\n\n            this.blocks[index].html.remove();\n\n        }\n\n        let deleteCount = replace ? 1 : 0;\n\n        this.blocks.splice(index, deleteCount, block);\n\n        if (index > 0) {\n\n            let previousBlock = this.blocks[index - 1];\n\n            previousBlock.html.insertAdjacentElement('afterend', block.html);\n\n        } else {\n\n            let nextBlock = this.blocks[index + 1];\n\n            if (nextBlock) {\n\n                nextBlock.html.insertAdjacentElement('beforebegin', block.html);\n\n            } else {\n\n                this.workingArea.appendChild(block.html);\n\n            }\n\n        }\n\n    }\n\n    /**\n     * Insert Block after passed target\n     *\n     * @todo decide if this method is necessary\n     *\n     * @param {Block} targetBlock — target after wich Block should be inserted\n     * @param {Block} newBlock — Block to insert\n     */\n    insertAfter(targetBlock, newBlock) {\n\n        let index = this.blocks.indexOf(targetBlock);\n\n        this.insert(index + 1, newBlock);\n\n    }\n\n    /**\n     * Get Block by index\n     *\n     * @param {Number} index — Block index\n     * @returns {Block}\n     */\n    get(index) {\n\n        return this.blocks[index];\n\n    }\n\n    /**\n     * Return index of passed Block\n     *\n     * @param {Block} block\n     * @returns {Number}\n     */\n    indexOf(block) {\n\n        return this.blocks.indexOf(block);\n\n    }\n\n    /**\n     * Get length of Block instances array\n     *\n     * @returns {Number}\n     */\n    get length() {\n\n        return this.blocks.length;\n\n    }\n\n    /**\n     * Get Block instances array\n     *\n     * @returns {Block[]}\n     */\n    get array() {\n\n        return this.blocks;\n\n    }\n\n    /**\n     * Get blocks html elements array\n     *\n     * @returns {HTMLElement[]}\n     */\n    get nodes() {\n\n        return _.array(this.workingArea.children);\n\n    }\n\n    /**\n     * Proxy trap to implement array-like setter\n     *\n     * @example\n     * blocks[0] = new Block(...)\n     *\n     * @param {Blocks} instance — Blocks instance\n     * @param {Number|String} index — block index\n     * @param {Block} block — Block to set\n     * @returns {Boolean}\n     */\n    static set(instance, index, block) {\n\n        if (isNaN(Number(index))) {\n\n            return false;\n\n        }\n\n        instance.insert(index, block);\n\n        return true;\n\n    }\n\n    /**\n     * Proxy trap to implement array-like getter\n     *\n     * @param {Blocks} instance — Blocks instance\n     * @param {Number|String} index — Block index\n     * @returns {Block|*}\n     */\n    static get(instance, index) {\n\n        if (isNaN(Number(index))) {\n\n            return instance[index];\n\n        }\n\n        return instance.get(index);\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/modules/blockManager.js","/**\n * @class Caret\n * @classdesc Contains methods for working Caret\n *\n * @typedef {Caret} Caret\n */\nexport default class Caret extends Module {\n\n    /**\n     * @constructor\n     */\n    constructor({config}) {\n\n        super({config});\n\n    }\n\n    /**\n     * Creates Document Range and sets caret to the element.\n     * @param {Element} element - target node.\n     * @param {Number} offset - offset\n     */\n    set( element, offset = 0) {\n\n        /** If Element is INPUT */\n        if ($.isNativeInput(element)) {\n\n            element.focus();\n            return;\n\n        }\n\n        let nodeToSet = $.getDeepestTextNode(element, true);\n\n        /** if found deepest node is native input */\n        if ($.isNativeInput(nodeToSet)) {\n\n            nodeToSet.focus();\n            return;\n\n        }\n\n        let range     = document.createRange(),\n            selection = window.getSelection();\n\n        range.setStart(nodeToSet, offset);\n        range.setEnd(nodeToSet, offset);\n\n        selection.removeAllRanges();\n        selection.addRange(range);\n\n    };\n\n    /**\n     * Set Caret to the last Block\n     *\n     * If last block is not empty, append another empty block\n     */\n    setToTheLastBlock() {\n\n        let blocks = this.Editor.BlockManager.blocks,\n            lastBlock;\n\n        if (blocks.length) {\n\n            lastBlock = blocks[blocks.length - 1];\n\n        }\n\n        /**\n         * If last block is empty and it is an initialBlock, set to that.\n         * Otherwise, append new empty block and set to that\n         */\n        if (lastBlock.isEmpty) {\n\n            this.set(lastBlock.html);\n\n        } else {\n\n            this.Editor.BlockManager.insert(this.config.initialBlock);\n\n        }\n\n\n        /**\n         //      * If inputs in redactor does not exits, then we put input index 0 not -1\n         //      */\n        //     var indexOfLastInput = editor.state.inputs.length > 0 ? editor.state.inputs.length - 1 : 0;\n        //\n        //     /** If we have any inputs */\n        //     if (editor.state.inputs.length) {\n        //\n        //         /** getting firstlevel parent of input */\n        //         firstLevelBlock = editor.content.getFirstLevelBlock(editor.state.inputs[indexOfLastInput]);\n        //\n        //     }\n        //\n        //     /** If input is empty, then we set caret to the last input */\n        //     if (editor.state.inputs.length && editor.state.inputs[indexOfLastInput].textContent === '' && firstLevelBlock.dataset.tool == editor.settings.initialBlockPlugin) {\n        //\n        //         editor.caret.setToBlock(indexOfLastInput);\n        //\n        //     } else {\n        //\n        //         /** Create new input when caret clicked in redactors area */\n        //         var NEW_BLOCK_TYPE = editor.settings.initialBlockPlugin;\n        //\n        //         editor.content.insertBlock({\n        //             type  : NEW_BLOCK_TYPE,\n        //             block : editor.tools[NEW_BLOCK_TYPE].render()\n        //         });\n        //\n        //         /** If there is no inputs except inserted */\n        //         if (editor.state.inputs.length === 1) {\n        //\n        //             editor.caret.setToBlock(indexOfLastInput);\n        //\n        //         } else {\n        //\n        //             /** Set caret to this appended input */\n        //             editor.caret.setToNextBlock(indexOfLastInput);\n        //\n        //         }\n        //\n        //     }\n\n    }\n\n    // /**\n    //  * Set caret to the passed Node\n    //  * @param {Element} node - content-editable Element\n    //  */\n    // set(node) {\n    //\n    //     /**\n    //      * @todo add working with Selection\n    //      * tmp: work with textContent\n    //      */\n    //\n    //     node.textContent += '|';\n    //\n    // }\n\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/modules/caret.js","/**\n * @module eventDispatcher\n *\n * Has two important methods:\n *    - {Function} on - appends subscriber to the event. If event doesn't exist - creates new one\n *    - {Function} emit - fires all subscribers with data\n *\n * @version 1.0.0\n *\n * @typedef {Events} Events\n * @property {Object} subscribers - all subscribers grouped by event name\n */\nexport default class Events extends Module {\n\n    /**\n     * @constructor\n     */\n    constructor({config}) {\n\n        super({config});\n        this.subscribers = {};\n\n    }\n\n    /**\n     * @param {String} eventName - event name\n     * @param {Function} callback - subscriber\n     */\n    on(eventName, callback) {\n\n        if (!(eventName in this.subscribers)) {\n\n            this.subscribers[eventName] = [];\n\n        }\n\n        // group by events\n        this.subscribers[eventName].push(callback);\n\n    }\n\n    /**\n     * @param {String} eventName - event name\n     * @param {Object} data - subscribers get this data when they were fired\n     */\n    emit(eventName, data) {\n\n        this.subscribers[eventName].reduce(function (previousData, currentHandler) {\n\n            let newData = currentHandler(previousData);\n\n            return newData ? newData : previousData;\n\n        }, data);\n\n    }\n\n    /**\n     * Destroyer\n     * clears subsribers list\n     */\n    destroy() {\n\n        this.subscribers = null;\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/modules/events.js","/**\n * Codex Editor Renderer Module\n *\n * @module Renderer\n * @author CodeX Team\n *\n * @version 2.0.0\n */\nexport default class Renderer extends Module {\n\n    /**\n     * @constructor\n     * @param {EditorConfig} config\n     */\n    constructor({config}) {\n\n        super({config});\n\n    }\n\n    /**\n     * @typedef {Object} RendererItems\n     * @property {String} type - tool name\n     * @property {Object} data - tool data\n     */\n\n    /**\n     * @example\n     *\n     * items: [\n     * {\n     *    type : 'paragraph',\n     *    data : {\n     *        text : 'Hello from Codex!'\n     *    }\n     * },\n     * {\n     *   type : 'paragraph',\n     *   data : {\n     *        text : 'Leave feedback if you like it!'\n     *   }\n     * },\n     * ]\n     *\n     */\n\n    /**\n     * Make plugin blocks from array of plugin`s data\n     * @param {RendererItems[]} items\n     */\n    render(items) {\n\n        let chainData = [];\n\n        for (let i = 0; i < items.length; i++) {\n\n            chainData.push({\n                function: () => this.insertBlock(items[i])\n            });\n\n        }\n\n        return _.sequence(chainData);\n\n    }\n\n    /**\n     * Get plugin instance\n     * Add plugin instance to BlockManager\n     * Insert block to working zone\n     *\n     * @param {Object} item\n     * @returns {Promise.<T>}\n     * @private\n     */\n    insertBlock(item) {\n\n        let tool = item.type,\n            data = item.data;\n\n        this.Editor.BlockManager.insert(tool, data);\n\n        return Promise.resolve();\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/modules/renderer.js","/**\n * CodeX Sanitizer\n *\n * @module Sanitizer\n * Clears HTML from taint tags\n *\n * @version 2.0.0\n *\n * @example\n *  Module can be used within two ways:\n *     1) When you have an instance\n *         - this.Editor.Sanitizer.clean(yourTaintString);\n *     2) As static method\n *         - CodexEditor.Sanitizer.clean(yourTaintString, yourCustomConfiguration);\n *\n * {@link SanitizerConfig}\n */\n\n\n/**\n * @typedef {Object} SanitizerConfig\n * @property {Object} tags - define tags restrictions\n *\n * @example\n *\n * tags : {\n *     p: true,\n *     a: {\n *       href: true,\n *       rel: \"nofollow\",\n *       target: \"_blank\"\n *     }\n * }\n */\nexport default class Sanitizer extends Module {\n\n    /**\n     * Initializes Sanitizer module\n     * Sets default configuration if custom not exists\n     *\n     * @property {SanitizerConfig} this.defaultConfig\n     * @property {HTMLJanitor} this._sanitizerInstance - Sanitizer library\n     *\n     * @param {SanitizerConfig} config\n     */\n    constructor({config}) {\n\n        super({config});\n\n        // default config\n        this.defaultConfig = null;\n        this._sanitizerInstance = null;\n\n        /** Custom configuration */\n        this.sanitizerConfig = config.settings ? config.settings.sanitizer : {};\n\n        /** HTML Janitor library */\n        this.sanitizerInstance = require('html-janitor');\n\n    }\n\n    /**\n     * If developer uses editor's API, then he can customize sanitize restrictions.\n     * Or, sanitizing config can be defined globally in editors initialization. That config will be used everywhere\n     * At least, if there is no config overrides, that API uses Default configuration\n     *\n     * @uses https://www.npmjs.com/package/html-janitor\n     *\n     * @param {HTMLJanitor} library - sanitizer extension\n     */\n    set sanitizerInstance(library) {\n\n        this._sanitizerInstance = new library(this.defaultConfig);\n\n    }\n\n    /**\n     * Sets sanitizer configuration. Uses default config if user didn't pass the restriction\n     * @param {SanitizerConfig} config\n     */\n    set sanitizerConfig(config) {\n\n        if (_.isEmpty(config)) {\n\n            this.defaultConfig = {\n                tags: {\n                    p: {},\n                    a: {\n                        href: true,\n                        target: '_blank',\n                        rel: 'nofollow'\n                    }\n                }\n            };\n\n        } else {\n\n            this.defaultConfig = config;\n\n        }\n\n    }\n\n    /**\n     * Cleans string from unwanted tags\n     * @param {String} taintString - HTML string\n     * @param {Object} customConfig - custom sanitizer configuration. Method uses default if param is empty\n     * @return {String} clean HTML\n     */\n    clean(taintString, customConfig = {}) {\n\n        if (_.isEmpty(customConfig)) {\n\n            return this._sanitizerInstance.clean(taintString);\n\n        } else {\n\n            return Sanitizer.clean(taintString, customConfig);\n\n        }\n\n\n    }\n\n    /**\n     * Cleans string from unwanted tags\n     * @static\n     *\n     * Method allows to use default config\n     *\n     * @param {String} taintString - taint string\n     * @param {SanitizerConfig} customConfig - allowed tags\n     *\n     * @return {String} clean HTML\n     */\n    static clean(taintString, customConfig) {\n\n        let newInstance = Sanitizer(customConfig);\n\n        return newInstance.clean(taintString);\n\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/modules/sanitizer.js","(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define('html-janitor', factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.HTMLJanitor = factory();\n  }\n}(this, function () {\n\n  /**\n   * @param {Object} config.tags Dictionary of allowed tags.\n   * @param {boolean} config.keepNestedBlockElements Default false.\n   */\n  function HTMLJanitor(config) {\n\n    var tagDefinitions = config['tags'];\n    var tags = Object.keys(tagDefinitions);\n\n    var validConfigValues = tags\n      .map(function(k) { return typeof tagDefinitions[k]; })\n      .every(function(type) { return type === 'object' || type === 'boolean' || type === 'function'; });\n\n    if(!validConfigValues) {\n      throw new Error(\"The configuration was invalid\");\n    }\n\n    this.config = config;\n  }\n\n  // TODO: not exhaustive?\n  var blockElementNames = ['P', 'LI', 'TD', 'TH', 'DIV', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'PRE'];\n  function isBlockElement(node) {\n    return blockElementNames.indexOf(node.nodeName) !== -1;\n  }\n\n  var inlineElementNames = ['A', 'B', 'STRONG', 'I', 'EM', 'SUB', 'SUP', 'U', 'STRIKE'];\n  function isInlineElement(node) {\n    return inlineElementNames.indexOf(node.nodeName) !== -1;\n  }\n\n  HTMLJanitor.prototype.clean = function (html) {\n    var sandbox = document.createElement('div');\n    sandbox.innerHTML = html;\n\n    this._sanitize(sandbox);\n\n    return sandbox.innerHTML;\n  };\n\n  HTMLJanitor.prototype._sanitize = function (parentNode) {\n    var treeWalker = createTreeWalker(parentNode);\n    var node = treeWalker.firstChild();\n    if (!node) { return; }\n\n    do {\n      // Ignore nodes that have already been sanitized\n      if (node._sanitized) {\n        continue;\n      }\n\n      if (node.nodeType === Node.TEXT_NODE) {\n        // If this text node is just whitespace and the previous or next element\n        // sibling is a block element, remove it\n        // N.B.: This heuristic could change. Very specific to a bug with\n        // `contenteditable` in Firefox: http://jsbin.com/EyuKase/1/edit?js,output\n        // FIXME: make this an option?\n        if (node.data.trim() === ''\n            && ((node.previousElementSibling && isBlockElement(node.previousElementSibling))\n                 || (node.nextElementSibling && isBlockElement(node.nextElementSibling)))) {\n          parentNode.removeChild(node);\n          this._sanitize(parentNode);\n          break;\n        } else {\n          continue;\n        }\n      }\n\n      // Remove all comments\n      if (node.nodeType === Node.COMMENT_NODE) {\n        parentNode.removeChild(node);\n        this._sanitize(parentNode);\n        break;\n      }\n\n      var isInline = isInlineElement(node);\n      var containsBlockElement;\n      if (isInline) {\n        containsBlockElement = Array.prototype.some.call(node.childNodes, isBlockElement);\n      }\n\n      // Block elements should not be nested (e.g. <li><p>...); if\n      // they are, we want to unwrap the inner block element.\n      var isNotTopContainer = !! parentNode.parentNode;\n      var isNestedBlockElement =\n            isBlockElement(parentNode) &&\n            isBlockElement(node) &&\n            isNotTopContainer;\n\n      var nodeName = node.nodeName.toLowerCase();\n\n      var allowedAttrs = getAllowedAttrs(this.config, nodeName, node);\n\n      var isInvalid = isInline && containsBlockElement;\n\n      // Drop tag entirely according to the whitelist *and* if the markup\n      // is invalid.\n      if (isInvalid || shouldRejectNode(node, allowedAttrs)\n          || (!this.config.keepNestedBlockElements && isNestedBlockElement)) {\n        // Do not keep the inner text of SCRIPT/STYLE elements.\n        if (! (node.nodeName === 'SCRIPT' || node.nodeName === 'STYLE')) {\n          while (node.childNodes.length > 0) {\n            parentNode.insertBefore(node.childNodes[0], node);\n          }\n        }\n        parentNode.removeChild(node);\n\n        this._sanitize(parentNode);\n        break;\n      }\n\n      // Sanitize attributes\n      for (var a = 0; a < node.attributes.length; a += 1) {\n        var attr = node.attributes[a];\n\n        if (shouldRejectAttr(attr, allowedAttrs, node)) {\n          node.removeAttribute(attr.name);\n          // Shift the array to continue looping.\n          a = a - 1;\n        }\n      }\n\n      // Sanitize children\n      this._sanitize(node);\n\n      // Mark node as sanitized so it's ignored in future runs\n      node._sanitized = true;\n    } while ((node = treeWalker.nextSibling()));\n  };\n\n  function createTreeWalker(node) {\n    return document.createTreeWalker(node,\n                                     NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT,\n                                     null, false);\n  }\n\n  function getAllowedAttrs(config, nodeName, node){\n    if (typeof config.tags[nodeName] === 'function') {\n      return config.tags[nodeName](node);\n    } else {\n      return config.tags[nodeName];\n    }\n  }\n\n  function shouldRejectNode(node, allowedAttrs){\n    if (typeof allowedAttrs === 'undefined') {\n      return true;\n    } else if (typeof allowedAttrs === 'boolean') {\n      return !allowedAttrs;\n    }\n\n    return false;\n  }\n\n  function shouldRejectAttr(attr, allowedAttrs, node){\n    var attrName = attr.name.toLowerCase();\n\n    if (allowedAttrs === true){\n      return false;\n    } else if (typeof allowedAttrs[attrName] === 'function'){\n      return !allowedAttrs[attrName](attr.value, node);\n    } else if (typeof allowedAttrs[attrName] === 'undefined'){\n      return true;\n    } else if (allowedAttrs[attrName] === false) {\n      return true;\n    } else if (typeof allowedAttrs[attrName] === 'string') {\n      return (allowedAttrs[attrName] !== attr.value);\n    }\n\n    return false;\n  }\n\n  return HTMLJanitor;\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/html-janitor/src/html-janitor.js\n// module id = 12\n// module chunks = 0","/**\n * Codex Editor Saver\n *\n * @module Saver\n * @author Codex Team\n * @version 2.0.0\n */\n\n/**\n * @typedef {Object} SavedData\n * @property {Date} time - saving proccess time\n * @property {Object} items - extracted data\n * @property {String} version - CodexEditor version\n */\n\n/**\n * @classdesc This method reduces all Blocks asyncronically and calls Block's save method to extract data\n *\n * @typedef {Saver} Saver\n * @property {Element} html - Editor HTML content\n * @property {String} json - Editor JSON output\n */\n\nexport default class Saver extends Module {\n\n    /**\n     * @constructor\n     * @param config\n     */\n    constructor({config}) {\n\n        super({config});\n\n        this.output = null;\n        this.blocksData = [];\n\n    }\n\n    /**\n     * Composes new chain of Promises to fire them alternatelly\n     * @return {SavedData}\n     */\n    save() {\n\n        let blocks = this.Editor.BlockManager.blocks,\n            chainData = [];\n\n        blocks.forEach((block) => {\n\n            chainData.push(block.data);\n\n        });\n\n        return Promise.all(chainData)\n            .then((allExtractedData) => this.makeOutput(allExtractedData))\n            .then((outputData) => {\n\n                return outputData;\n\n            });\n\n    }\n\n    /**\n     * Creates output object with saved data, time and version of editor\n     * @param {Object} allExtractedData\n     * @return {SavedData}\n     */\n    makeOutput(allExtractedData) {\n\n        let items = [],\n            totalTime = 0;\n\n        console.groupCollapsed('[CodexEditor saving]:');\n\n        allExtractedData.forEach((extraction, index) => {\n\n            /** Group process info */\n            console.log(`«${extraction.tool}» saving info`, extraction);\n            totalTime += extraction.time;\n            items.push(extraction.data);\n\n        });\n\n        console.log('Total', totalTime);\n        console.groupEnd();\n\n        return {\n            time    : +new Date(),\n            items   : items,\n            version : VERSION,\n        };\n\n    }\n\n}\n\n// module.exports = (function (saver) {\n//\n//     let editor = codex.editor;\n//\n//     /**\n//      * @public\n//      * Save blocks\n//      */\n//     saver.save = function () {\n//\n//         /** Save html content of redactor to memory */\n//         editor.state.html = editor.nodes.redactor.innerHTML;\n//\n//         /** Clean jsonOutput state */\n//         editor.state.jsonOutput = [];\n//\n//         return saveBlocks(editor.nodes.redactor.childNodes);\n//\n//     };\n//\n//     /**\n//      * @private\n//      * Save each block data\n//      *\n//      * @param blocks\n//      * @returns {Promise.<TResult>}\n//      */\n//     let saveBlocks = function (blocks) {\n//\n//         let data = [];\n//\n//         for(let index = 0; index < blocks.length; index++) {\n//\n//             data.push(getBlockData(blocks[index]));\n//\n//         }\n//\n//         return Promise.all(data)\n//             .then(makeOutput)\n//             .catch(editor.core.log);\n//\n//     };\n//\n//     /** Save and validate block data */\n//     let getBlockData = function (block) {\n//\n//         return saveBlockData(block)\n//             .then(validateBlockData)\n//             .catch(editor.core.log);\n//\n//     };\n//\n//     /**\n//     * @private\n//     * Call block`s plugin save method and return saved data\n//     *\n//     * @param block\n//     * @returns {Object}\n//     */\n//     let saveBlockData = function (block) {\n//\n//         let pluginName = block.dataset.tool;\n//\n//         /** Check for plugin existence */\n//         if (!editor.tools[pluginName]) {\n//\n//             editor.core.log(`Plugin «${pluginName}» not found`, 'error');\n//             return {data: null, pluginName: null};\n//\n//         }\n//\n//         /** Check for plugin having save method */\n//         if (typeof editor.tools[pluginName].save !== 'function') {\n//\n//             editor.core.log(`Plugin «${pluginName}» must have save method`, 'error');\n//             return {data: null, pluginName: null};\n//\n//         }\n//\n//         /** Result saver */\n//         let blockContent   = block.childNodes[0],\n//             pluginsContent = blockContent.childNodes[0],\n//             position = pluginsContent.dataset.inputPosition;\n//\n//         /** If plugin wasn't available then return data from cache */\n//         if ( editor.tools[pluginName].available === false ) {\n//\n//             return Promise.resolve({data: codex.editor.state.blocks.items[position].data, pluginName});\n//\n//         }\n//\n//         return Promise.resolve(pluginsContent)\n//             .then(editor.tools[pluginName].save)\n//             .then(data => Object({data, pluginName}));\n//\n//     };\n//\n//     /**\n//     * Call plugin`s validate method. Return false if validation failed\n//     *\n//     * @param data\n//     * @param pluginName\n//     * @returns {Object|Boolean}\n//     */\n//     let validateBlockData = function ({data, pluginName}) {\n//\n//         if (!data || !pluginName) {\n//\n//             return false;\n//\n//         }\n//\n//         if (editor.tools[pluginName].validate) {\n//\n//             let result = editor.tools[pluginName].validate(data);\n//\n//             /**\n//              * Do not allow invalid data\n//              */\n//             if (!result) {\n//\n//                 return false;\n//\n//             }\n//\n//         }\n//\n//         return {data, pluginName};\n//\n//\n//     };\n//\n//     /**\n//     * Compile article output\n//     *\n//     * @param savedData\n//     * @returns {{time: number, version, items: (*|Array)}}\n//     */\n//     let makeOutput = function (savedData) {\n//\n//         savedData = savedData.filter(blockData => blockData);\n//\n//         let items = savedData.map(blockData => Object({type: blockData.pluginName, data: blockData.data}));\n//\n//         editor.state.jsonOutput = items;\n//\n//         return {\n//             id: editor.state.blocks.id || null,\n//             time: +new Date(),\n//             version: editor.version,\n//             items\n//         };\n//\n//     };\n//\n//     return saver;\n//\n// })({});\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/modules/saver.js","/**\n *\n * «Toolbar» is the node that moves up/down over current block\n *\n *  ______________________________________ Toolbar ____________________________________________\n * |                                                                                           |\n * |  ..................... Content ....................   ......... Block Actions ..........  |\n * |  .                                                .   .                                .  |\n * |  .                                                .   . [Open Settings] [Remove Block] .  |\n * |  .  [Plus Button]  [Toolbox: {Tool1}, {Tool2}]    .   .                                .  |\n * |  .                                                .   .        [Settings Panel]        .  |\n * |  ..................................................   ..................................  |\n * |                                                                                           |\n * |___________________________________________________________________________________________|\n *\n *\n * Toolbox — its an Element contains tools buttons. Can be shown by Plus Button.\n *\n *  _______________ Toolbox _______________\n * |                                       |\n * | [Header] [Image] [List] [Quote] ...   |\n * |_______________________________________|\n *\n *\n * Settings Panel — is an Element with block settings:\n *\n *   ____ Settings Panel ____\n *  | ...................... |\n *  | .   Tool Settings    . |\n *  | ...................... |\n *  | .  Default Settings  . |\n *  | ...................... |\n *  |________________________|\n *\n *\n * @class\n * @classdesc Toolbar module\n *\n * @typedef {Toolbar} Toolbar\n * @property {Object} nodes\n * @property {Element} nodes.wrapper        - Toolbar main element\n * @property {Element} nodes.content        - Zone with Plus button and toolbox.\n * @property {Element} nodes.actions        - Zone with Block Settings and Remove Button\n * @property {Element} nodes.plusButton     - Button that opens or closes Toolbox\n * @property {Element} nodes.toolbox        - Container for tools\n * @property {Element} nodes.settingsToggler - open/close Settings Panel button\n * @property {Element} nodes.removeBlockButton - Remove Block button\n * @property {Element} nodes.settings          - Settings Panel\n * @property {Element} nodes.pluginSettings    - Plugin Settings section of Settings Panel\n * @property {Element} nodes.defaultSettings   - Default Settings section of Settings Panel\n */\nexport default class Toolbar extends Module {\n\n    /**\n     * @constructor\n     */\n    constructor({config}) {\n\n        super({config});\n\n        this.nodes = {\n            wrapper : null,\n            content : null,\n            actions : null,\n\n            // Content Zone\n            plusButton : null,\n\n            // Actions Zone\n            settingsToggler : null,\n            removeBlockButton: null,\n            settings: null,\n\n            // Settings Zone: Plugin Settings and Default Settings\n            pluginSettings: null,\n            defaultSettings: null,\n        };\n\n    }\n\n    /**\n     * CSS styles\n     * @return {Object}\n     * @constructor\n     */\n    static get CSS() {\n\n        return {\n            toolbar: 'ce-toolbar',\n            content: 'ce-toolbar__content',\n            actions: 'ce-toolbar__actions',\n\n            toolbarOpened: 'ce-toolbar--opened',\n\n            // Content Zone\n            plusButton: 'ce-toolbar__plus',\n            plusButtonHidden: 'ce-toolbar__plus--hidden',\n\n            // Actions Zone\n            settingsToggler: 'ce-toolbar__settings-btn',\n            removeBlockButton: 'ce-toolbar__remove-btn',\n\n            // Settings Panel\n            settings: 'ce-settings',\n            defaultSettings: 'ce-settings_default',\n            pluginSettings: 'ce-settings_plugin',\n        };\n\n    }\n\n    /**\n     * Makes toolbar\n     */\n    make() {\n\n        this.nodes.wrapper = $.make('div', Toolbar.CSS.toolbar);\n\n        /**\n         * Make Content Zone and Actions Zone\n         */\n        ['content',  'actions'].forEach( el => {\n\n            this.nodes[el] = $.make('div', Toolbar.CSS[el]);\n            $.append(this.nodes.wrapper, this.nodes[el]);\n\n        });\n\n\n        /**\n         * Fill Content Zone:\n         *  - Plus Button\n         *  - Toolbox\n         */\n        this.nodes.plusButton = $.make('div', Toolbar.CSS.plusButton);\n        $.append(this.nodes.content, this.nodes.plusButton);\n        this.nodes.plusButton.addEventListener('click', event => this.plusButtonClicked(event), false);\n\n\n        /**\n         * Make a Toolbox\n         */\n        this.Editor.Toolbox.make();\n\n        /**\n         * Fill Actions Zone:\n         *  - Settings Toggler\n         *  - Remove Block Button\n         *  - Settings Panel\n         */\n        this.nodes.settingsToggler  = $.make('span', Toolbar.CSS.settingsToggler);\n        this.nodes.removeBlockButton = this.makeRemoveBlockButton();\n\n        $.append(this.nodes.actions, [this.nodes.settingsToggler, this.nodes.removeBlockButton]);\n\n        /**\n         * Make and append Settings Panel\n         */\n        this.makeBlockSettingsPanel();\n\n        /**\n         * Append toolbar to the Editor\n         */\n        $.append(this.Editor.UI.nodes.wrapper, this.nodes.wrapper);\n\n    }\n\n    /**\n     * Panel with block settings with 2 sections:\n     *\n     * @return {Element}\n     */\n    makeBlockSettingsPanel() {\n\n        this.nodes.settings = $.make('div', Toolbar.CSS.settings);\n\n        this.nodes.pluginSettings = $.make('div', Toolbar.CSS.pluginSettings);\n        this.nodes.defaultSettings = $.make('div', Toolbar.CSS.defaultSettings);\n\n        $.append(this.nodes.settings, [this.nodes.pluginSettings, this.nodes.defaultSettings]);\n        $.append(this.nodes.actions, this.nodes.settings);\n\n    }\n\n    /**\n     * Makes Remove Block button, and confirmation panel\n     * @return {Element} wrapper with button and panel\n     */\n    makeRemoveBlockButton() {\n\n        /**\n         * @todo  add confirmation panel and handlers\n         * @see  {@link settings#makeRemoveBlockButton}\n         */\n        return $.make('span', Toolbar.CSS.removeBlockButton);\n\n    }\n\n    /**\n     * Move Toolbar to the Current Block\n     */\n    move() {\n\n        /** Close Toolbox when we move toolbar */\n        this.Editor.Toolbox.close();\n\n        let currentNode = this.Editor.BlockManager.currentNode;\n\n        /**\n         * If no one Block selected as a Current\n         */\n        if (!currentNode) {\n\n            return;\n\n        }\n\n        /**\n         * @todo Compute dynamically on prepare\n         * @type {number}\n         */\n        const defaultToolbarHeight = 49;\n        const defaultOffset = 34;\n\n        var newYCoordinate = currentNode.offsetTop - (defaultToolbarHeight / 2) + defaultOffset;\n\n        this.nodes.wrapper.style.transform = `translate3D(0, ${Math.floor(newYCoordinate)}px, 0)`;\n\n        /** Close trash actions */\n        // editor.toolbar.settings.hideRemoveActions();\n\n    }\n\n    /**\n     * Open Toolbar with Plus Button\n     */\n    open() {\n\n        this.nodes.wrapper.classList.add(Toolbar.CSS.toolbarOpened);\n\n    }\n\n    /**\n     * Close the Toolbar\n     */\n    close() {\n\n        this.nodes.wrapper.classList.remove(Toolbar.CSS.toolbarOpened);\n\n    }\n\n    /**\n     * Plus Button public methods\n     * @return {{hide: function(): void, show: function(): void}}\n     */\n    get plusButton() {\n\n        return {\n            hide: () => this.nodes.plusButton.classList.add(Toolbar.CSS.plusButtonHidden),\n            show: () => this.nodes.plusButton.classList.remove(Toolbar.CSS.plusButtonHidden)\n        };\n\n    }\n\n    /**\n     * Handler for Plus Button\n     * @param {MouseEvent} event\n     */\n    plusButtonClicked(event) {\n\n        this.Editor.Toolbox.toggle();\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/modules/toolbar.js","/**\n * @class Toolbox\n * @classdesc Holder for Tools\n *\n * @typedef {Toolbox} Toolbox\n * @property {Boolean} opened - opening state\n * @property {Object} nodes   - Toolbox nodes\n * @property {Object} CSS     - CSS class names\n *\n */\nexport default class Toolbox extends Module {\n\n    /**\n     * @constructor\n     */\n    constructor({config}) {\n\n        super({config});\n\n        this.nodes = {\n            toolbox: null,\n            buttons: []\n        };\n\n        /**\n         * Opening state\n         * @type {boolean}\n         */\n        this.opened = false;\n\n    }\n\n    /**\n     * CSS styles\n     * @return {{toolbox: string, toolboxButton: string, toolboxOpened: string}}\n     */\n    static get CSS() {\n\n        return  {\n            toolbox: 'ce-toolbox',\n            toolboxButton: 'ce-toolbox__button',\n            toolboxOpened: 'ce-toolbox--opened',\n        };\n\n    }\n\n    /**\n     * Makes the Toolbox\n     */\n    make() {\n\n        this.nodes.toolbox = $.make('div', Toolbox.CSS.toolbox);\n        $.append(this.Editor.Toolbar.nodes.content, this.nodes.toolbox);\n\n        this.addTools();\n\n    }\n\n    /**\n     * Iterates available tools and appends them to the Toolbox\n     */\n    addTools() {\n\n        let tools = this.Editor.Tools.toolsAvailable;\n\n        for (let toolName in tools) {\n\n            this.addTool(toolName, tools[toolName]);\n\n        }\n\n    }\n\n    /**\n     * Append Tool to the Toolbox\n     *\n     * @param {string} toolName  - tool name\n     * @param {Tool}  tool      - tool class\n     */\n    addTool(toolName, tool) {\n\n        if (tool.displayInToolbox && !tool.iconClassName) {\n\n            _.log('Toolbar icon class name is missed. Tool %o skipped', 'warn', toolName);\n            return;\n\n        }\n\n        /**\n         * @todo Add checkup for the render method\n         */\n        // if (typeof tool.render !== 'function') {\n        //\n        //     _.log('render method missed. Tool %o skipped', 'warn', tool);\n        //     return;\n        //\n        // }\n\n        /**\n         * Skip tools that pass 'displayInToolbox=false'\n         */\n        if (!tool.displayInToolbox) {\n\n            return;\n\n        }\n\n        let button = $.make('li', [Toolbox.CSS.toolboxButton, tool.iconClassName], {\n            title: toolName\n        });\n\n        /**\n         * Save tool's name in the button data-name\n         */\n        button.dataset.name = toolName;\n\n        $.append(this.nodes.toolbox, button);\n\n        this.nodes.toolbox.appendChild(button);\n        this.nodes.buttons.push(button);\n\n        /**\n         * @todo add event with module Listeners\n         */\n        // this.Editor.Listeners.add();\n        button.addEventListener('click', event => {\n\n            this.buttonClicked(event);\n\n        }, false);\n\n    }\n\n    /**\n     * Toolbox button click listener\n     * 1) if block is empty -> replace\n     * 2) if block is not empty -> add new block below\n     *\n     * @param {MouseEvent} event\n     */\n    buttonClicked(event) {\n\n        let toolButton = event.target,\n            toolName = toolButton.dataset.name,\n            tool = this.Editor.Tools.toolClasses[toolName];\n\n        /**\n         * @type {Block}\n         */\n        let currentBlock = this.Editor.BlockManager.currentBlock;\n\n        /**\n         * We do replace if:\n         * - block is empty\n         * - block is not irreplaceable\n         * @type {Array}\n         */\n        if (!tool.irreplaceable && currentBlock.isEmpty) {\n\n            this.Editor.BlockManager.replace(toolName);\n\n        } else {\n\n            this.Editor.BlockManager.insert(toolName);\n\n        }\n\n        /**\n         * @todo set caret to the new block\n         */\n\n        // window.setTimeout(function () {\n\n        /** Set caret to current block */\n        // editor.caret.setToBlock(currentInputIndex);\n\n        // }, 10);\n\n        /**\n         * Move toolbar when node is changed\n         */\n        this.Editor.Toolbar.move();\n\n    }\n\n    /**\n     * Open Toolbox with Tools\n     */\n    open() {\n\n        this.nodes.toolbox.classList.add(Toolbox.CSS.toolboxOpened);\n        this.opened = true;\n\n    }\n\n    /**\n     * Close Toolbox\n     */\n    close() {\n\n        this.nodes.toolbox.classList.remove(Toolbox.CSS.toolboxOpened);\n        this.opened = false;\n\n    }\n\n    /**\n     * Close Toolbox\n     */\n    toggle() {\n\n        if (!this.opened) {\n\n            this.open();\n\n        } else {\n\n            this.close();\n\n        }\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/modules/toolbox.js","/**\n * @module Codex Editor Tools Submodule\n *\n * Creates Instances from Plugins and binds external config to the instances\n */\n\n/**\n * Each Tool must contain the following important objects:\n *\n * @typedef {Object} ToolConfig {@link docs/tools.md}\n * @property {String} iconClassname - this a icon in toolbar\n * @property {Boolean} displayInToolbox - will be displayed in toolbox. Default value is TRUE\n * @property {Boolean} enableLineBreaks - inserts new block or break lines. Default value is FALSE\n * @property render @todo add description\n * @property save @todo add description\n * @property settings @todo add description\n * @property validate - method that validates output data before saving\n */\n\n/**\n * @typedef {Function} Tool {@link docs/tools.md}\n * @property {Boolean}      displayInToolbox      - By default, tools won't be added in the Toolbox. Pass true to add.\n * @property {String}       iconClassName         - CSS class name for the Toolbox button\n * @property {Boolean}      irreplaceable         - Toolbox behaviour: replace or add new block below\n * @property render\n * @property save\n * @property settings\n * @property validate\n *\n * @todo update according to current API\n * @todo describe Tool in the {@link docs/tools.md}\n */\n\n/**\n * Class properties:\n *\n * @typedef {Tools} Tools\n * @property {Tools[]} toolsAvailable - available Tools\n * @property {Tools[]} toolsUnavailable - unavailable Tools\n * @property {Object} toolsClasses - all classes\n * @property {EditorConfig} config - Editor config\n */\nexport default class Tools extends Module {\n\n    /**\n     * Returns available Tools\n     * @return {Tool[]}\n     */\n    get available() {\n\n        return this.toolsAvailable;\n\n    }\n\n    /**\n     * Returns unavailable Tools\n     * @return {Tool[]}\n     */\n    get unavailable() {\n\n        return this.toolsUnavailable;\n\n    }\n\n    /**\n     * Static getter for default Tool config fields\n     *\n     * @usage Tools.defaultConfig.displayInToolbox\n     * @return {ToolConfig}\n     */\n    static get defaultConfig() {\n\n        return {\n            iconClassName : '',\n            displayInToolbox : false,\n            enableLineBreaks : false,\n            irreplaceable : false\n        };\n\n    }\n\n    /**\n     * @constructor\n     *\n     * @param {EditorConfig} config\n     */\n    constructor({config}) {\n\n        super({config});\n\n        /**\n         * Map {name: Class, ...} where:\n         *  name — block type name in JSON. Got from EditorConfig.tools keys\n         * @type {Object}\n         */\n        this.toolClasses = {};\n\n        /**\n         * Available tools list\n         * {name: Class, ...}\n         * @type {Object}\n         */\n        this.toolsAvailable = {};\n\n        /**\n         * Tools that rejected a prepare method\n         * {name: Class, ... }\n         * @type {Object}\n         */\n        this.toolsUnavailable = {};\n\n    }\n\n    /**\n     * Creates instances via passed or default configuration\n     * @return {Promise}\n     */\n    prepare() {\n\n        if (!this.config.hasOwnProperty('tools')) {\n\n            return Promise.reject(\"Can't start without tools\");\n\n        }\n\n        for(let toolName in this.config.tools) {\n\n            this.toolClasses[toolName] = this.config.tools[toolName];\n\n        }\n\n        /**\n         * getting classes that has prepare method\n         */\n        let sequenceData = this.getListOfPrepareFunctions();\n\n        /**\n         * if sequence data contains nothing then resolve current chain and run other module prepare\n         */\n        if (sequenceData.length === 0) {\n\n            return Promise.resolve();\n\n        }\n\n        /**\n         * to see how it works {@link Util#sequence}\n         */\n        return _.sequence(sequenceData, (data) => {\n\n            this.success(data);\n\n        }, (data) => {\n\n            this.fallback(data);\n\n        });\n\n    }\n\n    /**\n     * Binds prepare function of plugins with user or default config\n     * @return {Array} list of functions that needs to be fired sequentially\n     */\n    getListOfPrepareFunctions() {\n\n        let toolPreparationList = [];\n\n        for(let toolName in this.toolClasses) {\n\n            let toolClass = this.toolClasses[toolName];\n\n            if (typeof toolClass.prepare === 'function') {\n\n                toolPreparationList.push({\n                    function : toolClass.prepare,\n                    data : {\n                        toolName\n                    }\n                });\n\n            } else {\n\n                /**\n                 * If Tool hasn't a prepare method, mark it as available\n                 */\n                this.toolsAvailable[toolName] = toolClass;\n\n            }\n\n        }\n\n        return toolPreparationList;\n\n    }\n\n    /**\n     * @param {ChainData.data} data - append tool to available list\n     */\n    success(data) {\n\n        this.toolsAvailable[data.toolName] = this.toolClasses[data.toolName];\n\n    }\n\n    /**\n     * @param {ChainData.data} data - append tool to unavailable list\n     */\n    fallback(data) {\n\n        this.toolsUnavailable[data.toolName] = this.toolClasses[data.toolName];\n\n    }\n\n    /**\n     * Return tool`a instance\n     *\n     * @param {String} tool — tool name\n     * @param {Object} data — initial data\n     *\n     * @todo throw exceptions if tool doesnt exist\n     *\n     */\n    construct(tool, data) {\n\n        let plugin = this.toolClasses[tool],\n            config = this.config.toolsConfig[tool];\n\n        if (!config) {\n\n            config = this.defaultConfig;\n\n        }\n\n        let instance = new plugin(data, config);\n\n        return instance;\n\n    }\n\n    /**\n     * Check if passed Tool is an instance of Initial Block Tool\n     * @param {Tool} tool - Tool to check\n     * @return {Boolean}\n     */\n    isInitial(tool) {\n\n        return tool instanceof this.available[this.config.initialBlock];\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/modules/tools.js","/**\n * Module UI\n *\n * @type {UI}\n */\n// let className = {\n\n/**\n     * @const {string} BLOCK_CLASSNAME - redactor blocks name\n     */\n// BLOCK_CLASSNAME : 'ce-block',\n\n/**\n     * @const {String} wrapper for plugins content\n     */\n// BLOCK_CONTENT : 'ce-block__content',\n\n/**\n     * @const {String} BLOCK_STRETCHED - makes block stretched\n     */\n// BLOCK_STRETCHED : 'ce-block--stretched',\n\n/**\n     * @const {String} BLOCK_HIGHLIGHTED - adds background\n     */\n// BLOCK_HIGHLIGHTED : 'ce-block--focused',\n\n/**\n     * @const {String} - for all default settings\n     */\n// SETTINGS_ITEM : 'ce-settings__item'\n// };\n\nimport Block from '../block';\n\n/**\n * @class\n *\n * @classdesc Makes CodeX Editor UI:\n *                <codex-editor>\n *                    <ce-redactor />\n *                    <ce-toolbar />\n *                    <ce-inline-toolbar />\n *                </codex-editor>\n *\n * @typedef {UI} UI\n * @property {EditorConfig} config   - editor configuration {@link CodexEditor#configuration}\n * @property {Object} Editor         - available editor modules {@link CodexEditor#moduleInstances}\n * @property {Object} nodes          -\n * @property {Element} nodes.holder  - element where we need to append redactor\n * @property {Element} nodes.wrapper  - <codex-editor>\n * @property {Element} nodes.redactor - <ce-redactor>\n */\nexport default class UI extends Module {\n\n    /**\n     * @constructor\n     *\n     * @param  {EditorConfig} config\n     */\n    constructor({config}) {\n\n        super({config});\n\n        this.nodes = {\n            holder: null,\n            wrapper: null,\n            redactor: null\n        };\n\n    }\n\n    /**\n     * Making main interface\n     */\n    prepare() {\n\n        return this.make()\n            /**\n             * Make toolbar\n             */\n            .then(() => this.Editor.Toolbar.make())\n            /**\n             * Load and append CSS\n             */\n            .then(() => this.loadStyles())\n            /**\n             * Bind events for the UI elements\n             */\n            .then(() => this.bindEvents())\n\n        /** Make container for inline toolbar */\n        // .then(makeInlineToolbar_)\n\n        /** Add inline toolbar tools */\n        // .then(addInlineToolbarTools_)\n\n        /** Draw wrapper for notifications */\n        // .then(makeNotificationHolder_)\n\n        /** Add eventlisteners to redactor elements */\n        // .then(bindEvents_)\n\n            .catch(e => {\n\n                console.error(e);\n\n            // editor.core.log(\"Can't draw editor interface\");\n\n            });\n\n    }\n\n    /**\n     * CodeX Editor UI CSS class names\n     * @return {{editorWrapper: string, editorZone: string, block: string}}\n     */\n    get CSS() {\n\n        return {\n            editorWrapper : 'codex-editor',\n            editorZone    : 'codex-editor__redactor',\n        };\n\n    }\n\n    /**\n     * Makes CodeX Editor interface\n     * @return {Promise<any>}\n     */\n    make() {\n\n        return new Promise( (resolve, reject) => {\n\n            /**\n             * Element where we need to append CodeX Editor\n             * @type {Element}\n             */\n            this.nodes.holder = document.getElementById(this.config.holderId);\n\n            if (!this.nodes.holder) {\n\n                reject(Error(\"Holder wasn't found by ID: #\" + this.config.holderId));\n                return;\n\n            }\n\n            /**\n             * Create and save main UI elements\n             */\n            this.nodes.wrapper  = $.make('div', this.CSS.editorWrapper);\n            this.nodes.redactor = $.make('div', this.CSS.editorZone);\n\n            this.nodes.wrapper.appendChild(this.nodes.redactor);\n            this.nodes.holder.appendChild(this.nodes.wrapper);\n\n            resolve();\n\n        });\n\n    }\n\n    /**\n     * Appends CSS\n     */\n    loadStyles() {\n\n        /**\n         * Load CSS\n         */\n        let styles = require('../../styles/main.css');\n\n        /**\n         * Make tag\n         */\n        let tag = $.make('style', null, {\n            textContent: styles.toString()\n        });\n\n        /**\n         * Append styles\n         */\n        $.append(document.head, tag);\n\n    }\n\n    /**\n     * Bind events on the CodeX Editor interface\n     */\n    bindEvents() {\n\n        /**\n         * @todo bind events with the Listeners module\n         */\n        this.nodes.redactor.addEventListener('click', event => this.redactorClicked(event), false );\n\n    }\n\n    /**\n     * All clicks on the redactor zone\n     *\n     * @param {MouseEvent} event\n     *\n     * @description\n     * 1. Save clicked Block as a current {@link BlockManager#currentNode}\n     *      it uses for the following:\n     *      - add CSS modifier for the selected Block\n     *      - on Enter press, we make a new Block under that\n     *\n     * 2. Move and show the Toolbar\n     *\n     * 3. Set a Caret\n     *\n     * 4. By clicks on the Editor's bottom zone:\n     *      - if last Block is empty, set a Caret to this\n     *      - otherwise, add a new empty Block and set a Caret to that\n     *\n     * 5. Hide the Inline Toolbar\n     *\n     * @see selectClickedBlock\n     *\n     */\n    redactorClicked(event) {\n\n        let clickedNode = event.target;\n\n        console.log('click', clickedNode);\n        if ( clickedNode.classList.contains(this.CSS.editorZone) ) {\n\n            this.clickedOnRedactorZone(event);\n            return;\n\n        }\n\n        /**\n         * Select clicked Block as Current\n         */\n        try {\n\n            this.Editor.BlockManager.setCurrentBlockByChildNode(clickedNode);\n\n        /**\n         * If clicked outside first-level Blocks, set Caret to the last empty Block\n         */\n\n        } catch (e) {\n\n            this.Editor.Caret.setToTheLastBlock();\n\n        }\n\n\n\n\n        /**\n         * @todo hide the Inline Toolbar\n         */\n        // var selectedText = editor.toolbar.inline.getSelectionText(),\n        //     firstLevelBlock;\n\n        /** If selection range took off, then we hide inline toolbar */\n        // if (selectedText.length === 0) {\n\n        // editor.toolbar.inline.close();\n\n        // }\n\n        /**\n         *\n\n        /** Update current input index in memory when caret focused into existed input */\n        // if (event.target.contentEditable == 'true') {\n        //\n        //     editor.caret.saveCurrentInputIndex();\n        //\n        // }\n\n        // if (editor.content.currentNode === null) {\n        //\n        //     /**\n        //      * If inputs in redactor does not exits, then we put input index 0 not -1\n        //      */\n        //     var indexOfLastInput = editor.state.inputs.length > 0 ? editor.state.inputs.length - 1 : 0;\n        //\n        //     /** If we have any inputs */\n        //     if (editor.state.inputs.length) {\n        //\n        //         /** getting firstlevel parent of input */\n        //         firstLevelBlock = editor.content.getFirstLevelBlock(editor.state.inputs[indexOfLastInput]);\n        //\n        //     }\n        //\n        //     /** If input is empty, then we set caret to the last input */\n        //     if (editor.state.inputs.length && editor.state.inputs[indexOfLastInput].textContent === '' && firstLevelBlock.dataset.tool == editor.settings.initialBlockPlugin) {\n        //\n        //         editor.caret.setToBlock(indexOfLastInput);\n        //\n        //     } else {\n        //\n        //         /** Create new input when caret clicked in redactors area */\n        //         var NEW_BLOCK_TYPE = editor.settings.initialBlockPlugin;\n        //\n        //         editor.content.insertBlock({\n        //             type  : NEW_BLOCK_TYPE,\n        //             block : editor.tools[NEW_BLOCK_TYPE].render()\n        //         });\n        //\n        //         /** If there is no inputs except inserted */\n        //         if (editor.state.inputs.length === 1) {\n        //\n        //             editor.caret.setToBlock(indexOfLastInput);\n        //\n        //         } else {\n        //\n        //             /** Set caret to this appended input */\n        //             editor.caret.setToNextBlock(indexOfLastInput);\n        //\n        //         }\n        //\n        //     }\n        //\n        // } else {\n        //\n        //     /** Close all panels */\n        //     editor.toolbar.settings.close();\n        //     editor.toolbar.toolbox.close();\n        //\n        // }\n        //\n        /**\n         * Move toolbar and open\n         */\n        this.Editor.Toolbar.move();\n        this.Editor.Toolbar.open();\n        //\n        // var inputIsEmpty = !editor.content.currentNode.textContent.trim(),\n        //     currentNodeType = editor.content.currentNode.dataset.tool,\n        //     isInitialType = currentNodeType == editor.settings.initialBlockPlugin;\n        //\n        //\n\n        /**\n         * Hide the Plus Button\n         * */\n        this.Editor.Toolbar.plusButton.hide();\n\n        /**\n         * Show the Plus Button if:\n         * - Block is an initial-block (Text)\n         * - Block is empty\n         */\n        let isInitialBlock = this.Editor.Tools.isInitial(this.Editor.BlockManager.currentBlock.tool),\n            isEmptyBlock = this.Editor.BlockManager.currentBlock.isEmpty;\n\n        if (isInitialBlock && isEmptyBlock) {\n\n            this.Editor.Toolbar.plusButton.show();\n\n        }\n\n    }\n\n    clickedOnRedactorZone(event) {\n\n        let lastBlock = this.Editor.BlockManager.getLastBlock(),\n            pluginsContent = lastBlock.pluginsContent;\n\n        /**\n         * If last block has text content, then insert new Block after\n         */\n        if (!$.isEmpty(pluginsContent)) {\n\n            this.Editor.BlockManager.insert(this.config.initialBlock, {});\n\n        } else {\n\n            this.Editor.Caret.set(pluginsContent);\n\n        }\n\n    }\n\n}\n\n// /**\n//  * Codex Editor UI module\n//  *\n//  * @author Codex Team\n//  * @version 1.2.0\n//  */\n//\n// module.exports = (function (ui) {\n//\n//     let editor = codex.editor;\n//\n//     /**\n//      * Basic editor classnames\n//      */\n//     ui.prepare = function () {\n//\n\n//\n//     };\n//\n//     /** Draw notifications holder */\n//     var makeNotificationHolder_ = function () {\n//\n//         /** Append block with notifications to the document */\n//         editor.nodes.notifications = editor.notifications.createHolder();\n//\n//     };\n//\n//\n//     var addInlineToolbarTools_ = function () {\n//\n//         var tools = {\n//\n//             bold: {\n//                 icon    : 'ce-icon-bold',\n//                 command : 'bold'\n//             },\n//\n//             italic: {\n//                 icon    : 'ce-icon-italic',\n//                 command : 'italic'\n//             },\n//\n//             link: {\n//                 icon    : 'ce-icon-link',\n//                 command : 'createLink'\n//             }\n//         };\n//\n//         var toolButton,\n//             tool;\n//\n//         for(var name in tools) {\n//\n//             tool = tools[name];\n//\n//             toolButton = editor.draw.toolbarButtonInline(name, tool.icon);\n//\n//             editor.nodes.inlineToolbar.buttons.appendChild(toolButton);\n//             /**\n//              * Add callbacks to this buttons\n//              */\n//             editor.ui.setInlineToolbarButtonBehaviour(toolButton, tool.command);\n//\n//         }\n//\n//     };\n//\n//     /**\n//      * @private\n//      * Bind editor UI events\n//      */\n//     var bindEvents_ = function () {\n//\n//         editor.core.log('ui.bindEvents fired', 'info');\n//\n//         // window.addEventListener('error', function (errorMsg, url, lineNumber) {\n//         //     editor.notifications.errorThrown(errorMsg, event);\n//         // }, false );\n//\n//         /** All keydowns on Document */\n//         editor.listeners.add(document, 'keydown', editor.callback.globalKeydown, false);\n//\n//         /** All keydowns on Redactor zone */\n//         editor.listeners.add(editor.nodes.redactor, 'keydown', editor.callback.redactorKeyDown, false);\n//\n//         /** All keydowns on Document */\n//         editor.listeners.add(document, 'keyup', editor.callback.globalKeyup, false );\n//\n//         /**\n//          * Mouse click to radactor\n//          */\n//         editor.listeners.add(editor.nodes.redactor, 'click', editor.callback.redactorClicked, false );\n//\n//         /**\n//          * Clicks to the Plus button\n//          */\n//         editor.listeners.add(editor.nodes.plusButton, 'click', editor.callback.plusButtonClicked, false);\n//\n//         /**\n//          * Clicks to SETTINGS button in toolbar\n//          */\n//         editor.listeners.add(editor.nodes.showSettingsButton, 'click', editor.callback.showSettingsButtonClicked, false );\n//\n//         /** Bind click listeners on toolbar buttons */\n//         for (var button in editor.nodes.toolbarButtons) {\n//\n//             editor.listeners.add(editor.nodes.toolbarButtons[button], 'click', editor.callback.toolbarButtonClicked, false);\n//\n//         }\n//\n//     };\n//\n//     ui.addBlockHandlers = function (block) {\n//\n//         if (!block) return;\n//\n//         /**\n//          * Block keydowns\n//          */\n//         editor.listeners.add(block, 'keydown', editor.callback.blockKeydown, false);\n//\n//         /**\n//          * Pasting content from another source\n//          * We have two type of sanitization\n//          * First - uses deep-first search algorithm to get sub nodes,\n//          * sanitizes whole Block_content and replaces cleared nodes\n//          * This method is deprecated\n//          * Method is used in editor.callback.blockPaste(event)\n//          *\n//          * Secont - uses Mutation observer.\n//          * Observer \"observe\" DOM changes and send changings to callback.\n//          * Callback gets changed node, not whole Block_content.\n//          * Inserted or changed node, which we've gotten have been cleared and replaced with diry node\n//          *\n//          * Method is used in editor.callback.blockPasteViaSanitize(event)\n//          *\n//          * @uses html-janitor\n//          * @example editor.callback.blockPasteViaSanitize(event), the second method.\n//          *\n//          */\n//         editor.listeners.add(block, 'paste', editor.paste.blockPasteCallback, false);\n//\n//         /**\n//          * Show inline toolbar for selected text\n//          */\n//         editor.listeners.add(block, 'mouseup', editor.toolbar.inline.show, false);\n//         editor.listeners.add(block, 'keyup', editor.toolbar.inline.show, false);\n//\n//     };\n//\n//     /** getting all contenteditable elements */\n//     ui.saveInputs = function () {\n//\n//         var redactor = editor.nodes.redactor;\n//\n//         editor.state.inputs = [];\n//\n//         /** Save all inputs in global variable state */\n//         var inputs = redactor.querySelectorAll('[contenteditable], input, textarea');\n//\n//         Array.prototype.map.call(inputs, function (current) {\n//\n//             if (!current.type || current.type == 'text' || current.type == 'textarea') {\n//\n//                 editor.state.inputs.push(current);\n//\n//             }\n//\n//         });\n//\n//     };\n//\n//     /**\n//      * Adds first initial block on empty redactor\n//      */\n//     ui.addInitialBlock = function () {\n//\n//         var initialBlockType = editor.settings.initialBlockPlugin,\n//             initialBlock;\n//\n//         if ( !editor.tools[initialBlockType] ) {\n//\n//             editor.core.log('Plugin %o was not implemented and can\\'t be used as initial block', 'warn', initialBlockType);\n//             return;\n//\n//         }\n//\n//         initialBlock = editor.tools[initialBlockType].render();\n//\n//         initialBlock.setAttribute('data-placeholder', editor.settings.placeholder);\n//\n//         editor.content.insertBlock({\n//             type  : initialBlockType,\n//             block : initialBlock\n//         });\n//\n//         editor.content.workingNodeChanged(initialBlock);\n//\n//     };\n//\n//     ui.setInlineToolbarButtonBehaviour = function (button, type) {\n//\n//         editor.listeners.add(button, 'mousedown', function (event) {\n//\n//             editor.toolbar.inline.toolClicked(event, type);\n//\n//         }, false);\n//\n//     };\n//\n//     return ui;\n//\n// })({});\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/modules/ui.js","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \":root {\\n\\n    /**\\n     * Toolbar buttons\\n     */\\n\\n    /**\\n     * Block content width\\n     */\\n\\n    /**\\n     * Toolbar Plus Button and Toolbox buttons height and width\\n     */\\n\\n}\\n/**\\n* Editor wrapper\\n*/\\n.codex-editor {\\n    position: relative;\\n    border: 1px solid #ccc;\\n    padding: 10px;\\n    box-sizing: border-box;\\n}\\n.codex-editor .hide {\\n        display: none;\\n    }\\n.codex-editor__redactor {\\n        padding-bottom: 300px;\\n    }\\n.ce-toolbar {\\n  position: absolute;\\n  left: 0;\\n  right: 0;\\n  top: 0;\\n  /*opacity: 0;*/\\n  /*visibility: hidden;*/\\n  transition: opacity 100ms ease;\\n  will-change: opacity, transform;\\n  display: none;\\n}\\n.ce-toolbar--opened {\\n    display: block;\\n    /*opacity: 1;*/\\n    /*visibility: visible;*/\\n  }\\n.ce-toolbar__content {\\n    max-width: 650px;\\n    margin: 0 auto;\\n    position: relative;\\n  }\\n.ce-toolbar__plus {\\n    position: absolute;\\n    left: calc(-34px - 10px);\\n    display: inline-block;\\n    background-color: #eff2f5;\\n    width: 34px;\\n    height: 34px;\\n    line-height: 34px;\\n    text-align: center;\\n    border-radius: 50%\\n  }\\n.ce-toolbar__plus::after {\\n    content: '+';\\n    font-size: 26px;\\n    display: block;\\n    margin-top: -2px;\\n    margin-right: -2px;\\n\\n}\\n.ce-toolbar__plus--hidden {\\n      display: none;\\n\\n}\\n.ce-toolbox {\\n    visibility: hidden;\\n    transition: opacity 100ms ease;\\n    will-change: opacity;\\n}\\n.ce-toolbox--opened {\\n        opacity: 1;\\n        visibility: visible;\\n    }\\n.ce-toolbox__button {\\n        display: inline-block;\\n        list-style: none;\\n        margin: 0;\\n        background: #eff2f5;\\n        width: 34px;\\n        height: 34px;\\n        border-radius: 30px;\\n        overflow: hidden;\\n        text-align: center;\\n        line-height: 34px\\n    }\\n.ce-toolbox__button::before {\\n    content: attr(title);\\n    font-size: 22px;\\n    font-weight: 500;\\n    letter-spacing: 1em;\\n    -webkit-font-feature-settings: \\\"smcp\\\", \\\"c2sc\\\";\\n            font-feature-settings: \\\"smcp\\\", \\\"c2sc\\\";\\n    font-variant-caps: all-small-caps;\\n    padding-left: 11.5px;\\n    margin-top: -1px;\\n    display: inline-block;\\n\\n}\\n.ce-block {\\n  border: 1px dotted #ccc;\\n  margin: 2px 0;\\n}\\n.ce-block--selected {\\n    background-color: #eff2f5;\\n  }\\n.ce-block__content {\\n    max-width: 650px;\\n    margin: 0 auto;\\n  }\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/styles/main.css\n// module id = 18\n// module chunks = 0","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader/lib/css-base.js\n// module id = 19\n// module chunks = 0"],"sourceRoot":""}