{"version":3,"sources":["webpack:///webpack/bootstrap fcccbb43242d9418e0a9","webpack:///./codex.js","webpack:///./src/modules/core.js","webpack:///./src/modules/tools.js"],"names":["module","exports","config","_configuration","holderId","placeholder","sanitizer","hideToolbar","configuration","moduleInstances","eventsDispatcher","Events","init","Core","require","Tools","moduleList","moduleName","modules","moduleExtends","push","state","nodes","Promise","resolve","then","prepare","bind","subscribers","eventName","callback","data","reduce","previousData","currentHandler","newData","Editor","console","log","self","reject","msg","type","args","window","e"],"mappings":"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AP,CAAgBK,IAAhB,EAAwBD,GAAxB,EAA6BE,IAA7B,EAAZ,KACKC,OAAOP,OAAP,CAAgBK,IAAhB,EAAwBD,GAAxB;AAER;AAEJ,cATD,CASE,OAAMI,CAAN,EAAS;AACP;AACH;AAEJ;AA7EL;;AAAA;AAAA;AAgnbA7C,QAAOC,OAAP;AAEI,sBAAc;AAAA;AAEb;;AAJL;AAAA;AAAA,mCAMc,CAET;AARL;;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,S","file":"codex-editor.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap fcccbb43242d9418e0a9","/**\n * Codex Editor\n *\n *\n *\n *\n * @author CodeX Team\n */\nmodule.exports = class CodexEditor {\n\n    /** Editor version */\n    static get version() {\n\n        return VERSION;\n\n    }\n\n    /**\n     * Setting for configuration\n     * @param config\n     */\n    set configuration(config = {}) {\n\n        this._configuration.holderId = config.holderId;\n        this._configuration.placeholder = config.placeholder || 'write your story...';\n        this._configuration.sanitizer = config.sanitizer || {\n\n        };\n\n        this._configuration.hideToolbar = config.hideToolbar ? config.hideToolbar : false;\n\n    }\n\n    /**\n     * Returns private property\n     * @returns {{}|*}\n     */\n    get configuration() {\n\n        return this._configuration;\n\n    }\n\n    /**\n     * @param config\n     *\n     * @property this.configuration - editor instance configuration\n     * @property this.moduleInstances - editor module instances\n     */\n    constructor(config) {\n\n        'use strict';\n\n        /** Privates */\n        this._configuration = {};\n\n        this.configuration = config;\n        this.moduleInstances = [];\n\n        this.eventsDispatcher = new Events();\n\n        this.init();\n\n    }\n\n    /**\n     * Initializes modules:\n     *  First: requiring modules from path\n     *  Second: memorizing the instances\n     */\n    init() {\n\n        let Core            = require('./src/modules/core'),\n            Tools           = require('./src/modules/tools');\n            // transport       = require('./src/modules/transport'),\n            // renderer        = require('./src/modules/renderer'),\n            // saver           = require('./src/modules/saver'),\n            // content         = require('./src/modules/content'),\n            // toolbar         = require('./src/modules/toolbar/toolbar'),\n            // callbacks       = require('./src/modules/callbacks'),\n            // draw            = require('./src/modules/draw'),\n            // caret           = require('./src/modules/caret'),\n            // notifications   = require('./src/modules/notifications'),\n            // parser          = require('./src/modules/parser'),\n            // sanitizer       = require('./src/modules/sanitizer'),\n            // listeners       = require('./src/modules/listeners'),\n            // destroyer       = require('./src/modules/destroyer'),\n            // paste           = require('./src/modules/paste');\n\n        let moduleList = {\n            'core' : Core,\n            'tools' : Tools\n        };\n\n        for(let moduleName in moduleList) {\n\n            let modules = [];\n\n            for(let moduleExtends in moduleList) {\n\n                if (moduleExtends === moduleName) {\n\n                    continue;\n\n                }\n                modules.push(moduleList[moduleExtends]);\n\n            }\n\n            this.moduleInstances[moduleName] = new moduleList[moduleName]({\n                modules : modules,\n                config  : this.configuration,\n                state   : this.state,\n                nodes   : this.nodes\n            });\n\n        }\n\n        // this.moduleInstances['core'].prepare();\n        Promise.resolve()\n            .then(this.moduleInstances['core'].prepare.bind(this.moduleInstances['core']));\n            // .then(this.moduleInstances['ui'].prepare)\n            // .then(this.moduleInstances['tools'.prepare])\n            // .catch(function (error) {\n            //\n            //     console.log('Error occured', error);\n            //\n            // });\n\n    }\n\n};\n\nclass Events {\n\n    constructor() {\n\n        this.subscribers = {};\n\n    }\n\n    on(eventName, callback) {\n\n        if (!(eventName in this.subscribers)) {\n\n            this.subscribers[eventName] = [];\n\n        }\n\n        // group by events\n        this.subscribers[eventName].push(callback);\n\n    }\n\n    emit(eventName, data) {\n\n        this.subscribers[eventName].reduce(function (previousData, currentHandler) {\n\n            let newData = currentHandler(previousData);\n\n            return newData ? newData : previousData;\n\n        }, data);\n\n    }\n\n}\n// module.exports = (function (editor) {\n//\n//     'use strict';\n//\n//     editor.version = VERSION;\n//     editor.scriptPrefix = 'cdx-script-';\n//\n//     var init = function () {\n//\n//         editor.core          = require('./modules/core');\n//         editor.tools         = require('./modules/tools');\n//         editor.ui            = require('./modules/ui');\n//         editor.transport     = require('./modules/transport');\n//         editor.renderer      = require('./modules/renderer');\n//         editor.saver         = require('./modules/saver');\n//         editor.content       = require('./modules/content');\n//         editor.toolbar       = require('./modules/toolbar/toolbar');\n//         editor.callback      = require('./modules/callbacks');\n//         editor.draw          = require('./modules/draw');\n//         editor.caret         = require('./modules/caret');\n//         editor.notifications = require('./modules/notifications');\n//         editor.parser        = require('./modules/parser');\n//         editor.sanitizer     = require('./modules/sanitizer');\n//         editor.listeners     = require('./modules/listeners');\n//         editor.destroyer     = require('./modules/destroyer');\n//         editor.paste         = require('./modules/paste');\n//\n//     };\n//\n//     /**\n//      * @public\n//      * holds initial settings\n//      */\n//     editor.settings = {\n//         tools     : ['paragraph', 'header', 'picture', 'list', 'quote', 'code', 'twitter', 'instagram', 'smile'],\n//         holderId  : 'codex-editor',\n//\n//         // Type of block showing on empty editor\n//         initialBlockPlugin: 'paragraph'\n//     };\n//\n//     /**\n//      * public\n//      *\n//      * Static nodes\n//      */\n//     editor.nodes = {\n//         holder            : null,\n//         wrapper           : null,\n//         toolbar           : null,\n//         inlineToolbar     : {\n//             wrapper : null,\n//             buttons : null,\n//             actions : null\n//         },\n//         toolbox           : null,\n//         notifications     : null,\n//         plusButton        : null,\n//         showSettingsButton: null,\n//         showTrashButton   : null,\n//         blockSettings     : null,\n//         pluginSettings    : null,\n//         defaultSettings   : null,\n//         toolbarButtons    : {}, // { type : DomEl, ... }\n//         redactor          : null\n//     };\n//\n//     /**\n//      * @public\n//      *\n//      * Output state\n//      */\n//     editor.state = {\n//         jsonOutput  : [],\n//         blocks      : [],\n//         inputs      : []\n//     };\n//\n//     /**\n//     * @public\n//     * Editor plugins\n//     */\n//     editor.tools = {};\n//\n//     /**\n//      * Initialization\n//      * @uses Promise cEditor.core.prepare\n//      * @param {Object} userSettings\n//      * @param {Array}  userSettings.tools       list of plugins\n//      * @param {String} userSettings.holderId    Element's id to append editor\n//      *\n//      * Load user defined tools\n//      * Tools must contain this important objects :\n//      *  @param {String} type - this is a type of plugin. It can be used as plugin name\n//      *  @param {String} iconClassname - this a icon in toolbar\n//      *  @param {Object} make - what should plugin do, when it is clicked\n//      *  @param {Object} appendCallback - callback after clicking\n//      *  @param {Element} settings - what settings does it have\n//      *  @param {Object} render - plugin get JSON, and should return HTML\n//      *  @param {Object} save - plugin gets HTML content, returns JSON\n//      *  @param {Boolean} displayInToolbox - will be displayed in toolbox. Default value is TRUE\n//      *  @param {Boolean} enableLineBreaks - inserts new block or break lines. Default value is FALSE\n//      *\n//      * @example\n//      *   -  type             : 'header',\n//      *   -  iconClassname    : 'ce-icon-header',\n//      *   -  make             : headerTool.make,\n//      *   -  appendCallback   : headerTool.appendCallback,\n//      *   -  settings         : headerTool.makeSettings(),\n//      *   -  render           : headerTool.render,\n//      *   -  save             : headerTool.save,\n//      *   -  displayInToolbox : true,\n//      *   -  enableLineBreaks : false\n//      */\n//     editor.start = function (userSettings) {\n//\n//         init();\n//\n//         editor.core.prepare(userSettings)\n//\n//         // If all ok, make UI, bind events and parse initial-content\n//             .then(editor.ui.prepare)\n//             .then(editor.tools.prepare)\n//             .then(editor.sanitizer.prepare)\n//             .then(editor.paste.prepare)\n//             .then(editor.transport.prepare)\n//             .then(editor.renderer.makeBlocksFromData)\n//             .then(editor.ui.saveInputs)\n//             .catch(function (error) {\n//\n//                 editor.core.log('Initialization failed with error: %o', 'warn', error);\n//\n//             });\n//\n//     };\n//\n//     return editor;\n//\n// })({});\n\n\n\n// WEBPACK FOOTER //\n// ./codex.js","/**\n * Codex Editor Core\n *\n * @author Codex Team\n * @version 1.1.3\n */\nmodule.exports = class Core {\n\n    /** Editor script prefixes */\n    static get scriptPrefix() {\n\n        return 'cdx-script-';\n\n    }\n\n    constructor(Editor) {\n\n        this.Editor = Editor;\n\n        this.sanitizer = null;\n        this.state = {};\n\n    }\n\n    prepare() {\n\n        console.log(this);\n        let self = this;\n\n        return new Promise(function (resolve, reject) {\n\n            console.log(self);\n            // if (typeof editor.nodes.holder === undefined || editor.nodes.holder === null) {\n            //\n            //     reject(Error(\"Holder wasn't found by ID: #\" + userSettings.holderId));\n            //\n            // } else {\n            //\n            //     resolve();\n            //\n            // }\n            //\n            // resolve();\n\n        });\n\n    }\n\n    /**\n     * Core custom logger\n     *\n     * @param msg\n     * @param type\n     * @param args\n     */\n    log(msg, type, args) {\n\n        type = type || 'log';\n\n        if (!args) {\n\n            args  = msg || 'undefined';\n            msg  = '[codex-editor]:      %o';\n\n        } else {\n\n            msg  = '[codex-editor]:      ' + msg;\n\n        }\n\n        try{\n\n            if ( 'console' in window && window.console[ type ] ) {\n\n                if ( args ) window.console[ type ]( msg, args );\n                else window.console[ type ]( msg );\n\n            }\n\n        } catch(e) {\n            // do nothing\n        }\n\n    }\n\n};\n// module.exports = (function (core) {\n//\n//     let editor = codex.editor;\n//\n//     /**\n//      * @public\n//      *\n//      * Editor preparing method\n//      * @return Promise\n//      */\n//     core.prepare = function (userSettings) {\n//\n//         return new Promise(function (resolve, reject) {\n//\n//             if ( userSettings ) {\n//\n//                 editor.settings.tools = userSettings.tools || editor.settings.tools;\n//\n//             }\n//\n//             if (userSettings.data) {\n//\n//                 editor.state.blocks = userSettings.data;\n//\n//             }\n//\n//             if (userSettings.initialBlockPlugin) {\n//\n//                 editor.settings.initialBlockPlugin = userSettings.initialBlockPlugin;\n//\n//             }\n//\n//             if (userSettings.sanitizer) {\n//\n//                 editor.settings.sanitizer = userSettings.sanitizer;\n//\n//             }\n//\n//             editor.hideToolbar = userSettings.hideToolbar;\n//\n//             editor.settings.placeholder = userSettings.placeholder || '';\n//\n//             editor.nodes.holder = document.getElementById(userSettings.holderId || editor.settings.holderId);\n//\n//             if (typeof editor.nodes.holder === undefined || editor.nodes.holder === null) {\n//\n//                 reject(Error(\"Holder wasn't found by ID: #\" + userSettings.holderId));\n//\n//             } else {\n//\n//                 resolve();\n//\n//             }\n//\n//         });\n//\n//     };\n//\n//     /**\n//      * @protected\n//      *\n//      * Helper for insert one element after another\n//      */\n//     core.insertAfter = function (target, element) {\n//\n//         target.parentNode.insertBefore(element, target.nextSibling);\n//\n//     };\n//\n//     /**\n//      * @const\n//      *\n//      * Readable DOM-node types map\n//      */\n//     core.nodeTypes = {\n//         TAG     : 1,\n//         TEXT    : 3,\n//         COMMENT : 8,\n//         DOCUMENT_FRAGMENT: 11\n//     };\n//\n//     /**\n//      * @const\n//      * Readable keys map\n//      */\n//     core.keys = { BACKSPACE: 8, TAB: 9, ENTER: 13, SHIFT: 16, CTRL: 17, ALT: 18, ESC: 27, SPACE: 32, LEFT: 37, UP: 38, DOWN: 40, RIGHT: 39, DELETE: 46, META: 91 };\n//\n//     /**\n//      * @protected\n//      *\n//      * Check object for DOM node\n//      */\n//     core.isDomNode = function (el) {\n//\n//         return el && typeof el === 'object' && el.nodeType && el.nodeType == this.nodeTypes.TAG;\n//\n//     };\n//\n//     /**\n//     * Checks passed object for emptiness\n//     * @require ES5 - Object.keys\n//     * @param {object}\n//     */\n//     core.isEmpty = function ( obj ) {\n//\n//         return Object.keys(obj).length === 0;\n//\n//     };\n//\n//     /**\n//      * Native Ajax\n//      * @param {String}   settings.url         - request URL\n//      * @param {function} settings.beforeSend  - returned value will be passed as context to the Success, Error and Progress callbacks\n//      * @param {function} settings.success\n//      * @param {function} settings.progress\n//      */\n//     core.ajax = function (settings) {\n//\n//         if (!settings || !settings.url) {\n//\n//             return;\n//\n//         }\n//\n//         var XMLHTTP = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP'),\n//             encodedString,\n//             isFormData,\n//             prop;\n//\n//\n//         settings.async           = true;\n//         settings.type            = settings.type || 'GET';\n//         settings.data            = settings.data || '';\n//         settings['content-type'] = settings['content-type'] || 'application/json; charset=utf-8';\n//\n//         if (settings.type == 'GET' && settings.data) {\n//\n//             settings.url = /\\?/.test(settings.url) ? settings.url + '&' + settings.data : settings.url + '?' + settings.data;\n//\n//         } else {\n//\n//             encodedString = '';\n//             for(prop in settings.data) {\n//\n//                 encodedString += (prop + '=' + encodeURIComponent(settings.data[prop]) + '&');\n//\n//             }\n//\n//         }\n//\n//         if (settings.withCredentials) {\n//\n//             XMLHTTP.withCredentials = true;\n//\n//         }\n//\n//         /**\n//          * Value returned in beforeSend funtion will be passed as context to the other response callbacks\n//          * If beforeSend returns false, AJAX will be blocked\n//          */\n//         let responseContext,\n//             beforeSendResult;\n//\n//         if (typeof settings.beforeSend === 'function') {\n//\n//             beforeSendResult = settings.beforeSend.call();\n//\n//             if (beforeSendResult === false) {\n//\n//                 return;\n//\n//             }\n//\n//         }\n//\n//         XMLHTTP.open( settings.type, settings.url, settings.async );\n//\n//         /**\n//          * If we send FormData, we need no content-type header\n//          */\n//         isFormData = isFormData_(settings.data);\n//\n//         if (!isFormData) {\n//\n//             if (settings.type !== 'POST') {\n//\n//                 XMLHTTP.setRequestHeader('Content-type', settings['content-type']);\n//\n//             } else {\n//\n//                 XMLHTTP.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n//\n//             }\n//\n//         }\n//\n//         XMLHTTP.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n//\n//         responseContext = beforeSendResult || XMLHTTP;\n//\n//         if (typeof settings.progress === 'function') {\n//\n//             XMLHTTP.upload.onprogress = settings.progress.bind(responseContext);\n//\n//         }\n//\n//         XMLHTTP.onreadystatechange = function () {\n//\n//             if (XMLHTTP.readyState === 4) {\n//\n//                 if (XMLHTTP.status === 200) {\n//\n//                     if (typeof settings.success === 'function') {\n//\n//                         settings.success.call(responseContext, XMLHTTP.responseText);\n//\n//                     }\n//\n//                 } else {\n//\n//                     if (typeof settings.error === 'function') {\n//\n//                         settings.error.call(responseContext, XMLHTTP.responseText, XMLHTTP.status);\n//\n//                     }\n//\n//                 }\n//\n//             }\n//\n//         };\n//\n//         if (isFormData) {\n//\n//             // Sending FormData\n//             XMLHTTP.send(settings.data);\n//\n//         } else {\n//\n//             // POST requests\n//             XMLHTTP.send(encodedString);\n//\n//         }\n//\n//         return XMLHTTP;\n//\n//     };\n//\n//     /**\n//     * Appends script to head of document\n//     * @return Promise\n//     */\n//     core.importScript = function (scriptPath, instanceName) {\n//\n//         return new Promise(function (resolve, reject) {\n//\n//             let script;\n//\n//             /** Script is already loaded */\n//             if ( !instanceName ) {\n//\n//                 reject('Instance name is missed');\n//\n//             } else if ( document.getElementById(editor.scriptPrefix + instanceName) ) {\n//\n//                 resolve(scriptPath);\n//\n//             }\n//\n//             script = document.createElement('SCRIPT');\n//             script.async = true;\n//             script.defer = true;\n//             script.id = editor.scriptPrefix + instanceName;\n//\n//             script.onload = function () {\n//\n//                 resolve(scriptPath);\n//\n//             };\n//\n//             script.onerror = function () {\n//\n//                 reject(scriptPath);\n//\n//             };\n//\n//             script.src = scriptPath;\n//             document.head.appendChild(script);\n//\n//         });\n//\n//     };\n//\n//     /**\n//      * Function for checking is it FormData object to send.\n//      * @param {Object} object to check\n//      * @return boolean\n//      */\n//     var isFormData_ = function (object) {\n//\n//         return object instanceof FormData;\n//\n//     };\n//\n//     /**\n//      * Check block\n//      * @param target\n//      * @description Checks target is it native input\n//      */\n//     core.isNativeInput = function (target) {\n//\n//         var nativeInputAreas = ['INPUT', 'TEXTAREA'];\n//\n//         return nativeInputAreas.indexOf(target.tagName) != -1;\n//\n//     };\n//\n//     /**\n//      * Check if block is empty\n//      * We should check block textContent, child native inputs and some exceptions like IMG and IFRAME\n//      *\n//      * @param block\n//      * @returns {boolean}\n//      */\n//     core.isBlockEmpty = function (block) {\n//\n//         const EXCEPTION_TAGS = ['IMG', 'IFRAME'];\n//\n//         var nativeInputs         = block.querySelectorAll('textarea, input'),\n//             nativeInputsAreEmpty = true,\n//             textContentIsEmpty   = !block.textContent.trim();\n//\n//         Array.prototype.forEach.call(nativeInputs, function (input) {\n//\n//             if (input.type == 'textarea' || input.type == 'text') {\n//\n//                 nativeInputsAreEmpty = nativeInputsAreEmpty && !input.value.trim();\n//\n//             }\n//\n//         });\n//\n//         return textContentIsEmpty && nativeInputsAreEmpty && !EXCEPTION_TAGS.includes(block.tagName);\n//\n//     };\n//\n//\n//     return core;\n//\n// })({});\n\n\n\n// WEBPACK FOOTER //\n// ./src/modules/core.js","module.exports = class Tools {\n\n    constructor() {\n\n    }\n\n    prepare() {\n\n    }\n\n};\n// /**\n// * Module working with plugins\n// */\n// module.exports = (function () {\n//\n//     let editor = codex.editor;\n//\n//     /**\n//      * Initialize plugins before using\n//      * Ex. Load scripts or call some internal methods\n//      * @return Promise\n//      */\n//     function prepare() {\n//\n//         return new Promise(function (resolve_, reject_) {\n//\n//             Promise.resolve()\n//\n//                 /**\n//                 * Compose a sequence of plugins that requires preparation\n//                 */\n//                 .then(function () {\n//\n//                     let pluginsRequiresPreparation = [],\n//                         allPlugins = editor.tools;\n//\n//                     for ( let pluginName in allPlugins ) {\n//\n//                         let plugin = allPlugins[pluginName];\n//\n//                         if (plugin.prepare && typeof plugin.prepare != 'function' || !plugin.prepare) {\n//\n//                             continue;\n//\n//                         }\n//\n//                         pluginsRequiresPreparation.push(plugin);\n//\n//                     }\n//\n//                     /**\n//                     * If no one passed plugins requires preparation, finish prepare() and go ahead\n//                     */\n//                     if (!pluginsRequiresPreparation.length) {\n//\n//                         resolve_();\n//\n//                     }\n//\n//                     return pluginsRequiresPreparation;\n//\n//                 })\n//\n//                 /** Wait plugins while they prepares */\n//                 .then(waitAllPluginsPreparation_)\n//\n//                 .then(function () {\n//\n//                     editor.core.log('Plugins loaded', 'info');\n//                     resolve_();\n//\n//                 }).catch(function (error) {\n//\n//                     reject_(error);\n//\n//                 });\n//\n//         });\n//\n//     }\n//\n//     /**\n//     * @param {array} plugins - list of tools that requires preparation\n//     * @return {Promise} resolved while all plugins will be ready or failed\n//     */\n//     function waitAllPluginsPreparation_(plugins) {\n//\n//         /**\n//         * @calls allPluginsProcessed__ when all plugins prepared or failed\n//         */\n//         return new Promise (function (allPluginsProcessed__) {\n//\n//             /**\n//              * pluck each element from queue\n//              * First, send resolved Promise as previous value\n//              * Each plugins \"prepare\" method returns a Promise, that's why\n//              * reduce current element will not be able to continue while can't get\n//              * a resolved Promise\n//              *\n//              * If last plugin is \"prepared\" then go to the next stage of initialization\n//              */\n//             plugins.reduce(function (previousValue, plugin, iteration) {\n//\n//                 return previousValue.then(function () {\n//\n//                     /**\n//                     * Wait till plugins prepared\n//                     * @calls pluginIsReady__ when plugin is ready or failed\n//                     */\n//                     return new Promise ( function (pluginIsReady__) {\n//\n//                         callPluginsPrepareMethod_( plugin )\n//\n//                             .then( pluginIsReady__ )\n//                             .then( function () {\n//\n//                                 plugin.available = true;\n//\n//                             })\n//\n//                             .catch(function (error) {\n//\n//                                 editor.core.log(`Plugin «${plugin.type}» was not loaded. Preparation failed because %o`, 'warn', error);\n//                                 plugin.available = false;\n//                                 plugin.loadingMessage = error;\n//\n//                                 /** Go ahead even some plugin has problems */\n//                                 pluginIsReady__();\n//\n//                             })\n//\n//                             .then(function () {\n//\n//                                 /** If last plugin has problems then just ignore and continue */\n//                                 if (iteration == plugins.length - 1) {\n//\n//                                     allPluginsProcessed__();\n//\n//                                 }\n//\n//                             });\n//\n//                     });\n//\n//                 });\n//\n//             }, Promise.resolve() );\n//\n//         });\n//\n//     }\n//\n//     var callPluginsPrepareMethod_ = function (plugin) {\n//\n//         return plugin.prepare( plugin.config || {} );\n//\n//     };\n//\n//     return {\n//         prepare: prepare\n//     };\n//\n// }());\n\n\n// WEBPACK FOOTER //\n// ./src/modules/tools.js"],"sourceRoot":""}